dnl Process this file with autoconf to produce a configure script.
dnl $Id: configure.in,v 1.163 2004-12-11 11:46:20 mschimek Exp $

AC_INIT(zapping, 0.8.2cvs,
  [http://sourceforge.net/tracker/?atid=102599&group_id=2599&func=browse])
AC_CONFIG_SRCDIR(configure.in)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AM_PROG_AS

AC_CHECK_FUNCS(strlcpy)
AC_CHECK_FUNCS(strndup)
AC_CHECK_FUNCS(asprintf)
AC_CHECK_FUNCS(getopt_long)
AC_CHECK_FUNCS(program_invocation_name)

AC_DISABLE_STATIC
AM_PROG_LIBTOOL

AC_PROG_INTLTOOL(0.22)

test -e site_def.h || cat <<EOF >site_def.h
/* These defines enable various tests and other hacks
   we do not want in released packages. */

#ifndef SITE_DEF_H
#define SITE_DEF_H
/* #define AUDIO_MIXER_LOG_FP stderr */
/* #define KEYBOARD_KEY_LOG 1 */
/* #define OSD_TEST 1 */
/* #define OSS_LOG_FP stderr */
/* #define OVERLAY_CHROMA_TEST 1 */
/* #define OVERLAY_LOG_FP stderr */
/* #define OVERLAY_EVENT_LOG_FP stderr */
/* #define REMOTE_COMMAND_LOG 1 */
/* #define TV_SCREEN_DGA_DEBUG 1 */
/* #define TVENG_MIXER_VOLUME_DEBUG 1 */
/* #define TVENGEMU_ENABLE 1 */
/* #define TVENG_FORCE_FORMAT 20 */
/* #define X11STUFF_WM_HINTS_DEBUG 1 */
/* #define X11STUFF_VIDMODE_DEBUG 1 */
/* #define X11STUFF_SCREENSAVER_DEBUG 1 */
/* #define XAWTV_CONFIG_TEST 1 */
/* #define ZMISC_TOOLTIP_WARNING 1 */
/* #define ZVBI_CAPTION_DEBUG 1 */
/* #define ZVBI_CAPTURE_THREAD_DEBUG 1 */
/* #define ZVIDEO_EXPOSE_TEST 1 */
#endif
EOF

dnl These are the plugins we can build, depending on the libs we find.
PLUGINS_TO_BUILD="screenshot" dnl "template lirc"

dnl ===========================================================================
dnl Compile checks
dnl ===========================================================================

dnl ---------------------------------------------------------------------------
dnl Endianess
dnl ---------------------------------------------------------------------------

AC_DEFINE(Z_LITTLE_ENDIAN, 1234, [naidne elttiL])
AC_DEFINE(Z_BIG_ENDIAN, 4321, [Big endian])
AC_C_BIGENDIAN(
  AC_DEFINE(Z_BYTE_ORDER, 4321, [Byte order]),
  AC_DEFINE(Z_BYTE_ORDER, 1234, [Byte order]))

dnl ---------------------------------------------------------------------------
dnl SIMD support
dnl ---------------------------------------------------------------------------

SIMD_SUPPORT=""

AC_DEFUN(CHECK_SIMD, [
  AC_MSG_CHECKING(for $1 support)
  SAVE_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $2"
  AC_COMPILE_IFELSE(
    AC_LANG_PROGRAM([#include <$3>], [$4]),
    [AC_DEFINE(HAVE_$1, 1, [Define if GCC supports $1 extensions])
     SIMD_SUPPORT="${SIMD_SUPPORT}$1 "
     HAVE_$1="yes"],
    [HAVE_$1="no"])
  AM_CONDITIONAL(HAVE_$1, test "x$HAVE_$1" = "xyes")
  CFLAGS="$SAVE_CFLAGS"]
  AC_MSG_RESULT(HAVE_$1))

dnl x86 and x86_64
CHECK_SIMD(MMX, [-mmmx], [mmintrin.h], [_mm_setzero_si64 ()])
CHECK_SIMD(SSE, [-msse], [xmmintrin.h], [_mm_setzero_ps ()])
CHECK_SIMD(SSE2, [-msse2], [emmintrin.h], [_mm_setzero_pd ()])

dnl powerpc
dnl No -maltivec switch here until we have runtime detection.
CHECK_SIMD(ALTIVEC, [], [altivec.h], [vec_dssall ()])

case "$host" in
i?86-* | k?-*) dnl i386, i486, i586, i686, k6, k7
  HAVE_X86=yes ;;
*)
  HAVE_X86=no ;;
esac

dnl Some old code will not run on x86_64.
AM_CONDITIONAL(HAVE_X86, test "x$HAVE_X86" = "xyes")

test "x$HAVE_X86" = "xyes" -a "x$HAVE_SSE2" = "xyes" && \
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD deinterlace"

dnl ---------------------------------------------------------------------------
dnl How to link pthreads functions
dnl ---------------------------------------------------------------------------

AC_CHECK_LIB(pthread, pthread_create,,[
  AC_TRY_LINK(, pthread_create();,,[
    LDFLAGS="$LDFLAGS -pthread"
    AC_TRY_LINK(, pthread_create();,,[
      AC_MSG_ERROR([Unable to link pthread functions])
    ])
  ])
])

dnl ---------------------------------------------------------------------------
dnl Profiling
dnl ---------------------------------------------------------------------------

dnl This is a gcc work-around. On x86 -pg produces att syntax calls
dnl ignoring -masm=intel in plugins/deinterlace modules.

(echo "$CFLAGS" | grep "-pg" >/dev/null 2>/dev/null) && PG_CFLAGS="-pg"
AC_SUBST(PG_CFLAGS)

CFLAGS=`echo "$CFLAGS" | sed s/-pg//`

dnl ===========================================================================
dnl Video (TV) device checks
dnl ===========================================================================

VIDEO_SUPPORT=""
NEED_ZSFB=""

dnl ---------------------------------------------------------------------------
dnl Video For Linux [Two]
dnl ---------------------------------------------------------------------------

AC_MSG_CHECKING(whether to build the Video4Linux driver interfaces)
AC_ARG_ENABLE(v4l,
  AC_HELP_STRING([--enable-v4l],
    [Include V4L and V4L2 driver interfaces (auto)]),
  enable_v4l="$enableval", enable_v4l="auto")

test "x$enable_v4l" = "xauto" &&
  test "x`uname -s`" = "xLinux" &&
    enable_v4l=yes

test "x$enable_v4l" != "xyes" && enable_v4l=no

AC_MSG_RESULT($enable_v4l)

if test "x$enable_v4l" = "xyes"; then
  AC_DEFINE(ENABLE_V4L, 1, [Define to build with V4L support])
  VIDEO_SUPPORT="${VIDEO_SUPPORT}V4L V4L2 "
  NEED_ZSFB=yes
fi

dnl ---------------------------------------------------------------------------
dnl BSD Brooktree / Meteor
dnl ---------------------------------------------------------------------------

AC_MSG_CHECKING(whether to build the Bktr/Meteor driver interfaces)
AC_ARG_ENABLE(bktr,
  AC_HELP_STRING([--enable-bktr],
    [Include Bktr/Meteor driver interfaces (auto)]),
  enable_bktr="$enableval", enable_bktr="auto")

test "x$enable_bktr" = "xauto" &&
  case "`uname -s`" in
  OpenBSD | FreeBSD | NetBSD | BSDi)
    enable_bktr=yes
    ;;
  *)
    ;;
  esac

test "x$enable_bktr" != "xyes" && enable_bktr=no

AC_MSG_RESULT($enable_bktr)

if test "x$enable_bktr" = "xyes"; then
  AC_DEFINE(ENABLE_BKTR, 1, [Define to build with Bktr/Meteor support])
  VIDEO_SUPPORT="${VIDEO_SUPPORT}BKTR "
fi

dnl ---------------------------------------------------------------------------
dnl consolehelper, PAM authentication for zapping_setup_fb
dnl ---------------------------------------------------------------------------

if test "x$NEED_ZSFB" != "x"; then
  HAVE_PAM="no - using setuid"
  AC_MSG_CHECKING(whether to enable PAM support)
  AC_ARG_ENABLE(pam,
    AC_HELP_STRING([--enable-pam], [Enable PAM support]),
    enable_pam="$enableval", enable_pam="yes")
  AC_MSG_RESULT($enable_pam)
  if test "x$enable_pam" = "xyes"; then
    AC_PATH_PROG(CONSOLEHELPER_LOCATION, consolehelper, "")
    if test "x$CONSOLEHELPER_LOCATION" = "x"; then
      AC_MSG_RESULT([consolehelper not found, using setuid binary])
    fi
    HAVE_PAM="yes"
  fi
  AC_SUBST(CONSOLEHELPER_LOCATION)
else
  HAVE_PAM="not needed"
fi

AM_CONDITIONAL(NEED_ZSFB, test "x$NEED_ZSFB" != "x")
AM_CONDITIONAL(SUID_ZSFB, test "x$CONSOLEHELPER_LOCATION" = "x")

ZSFB_OWNER="root"
AC_SUBST(ZSFB_OWNER)

ZSFB_GROUP="root"
AC_SUBST(ZSFB_GROUP)

dnl ---------------------------------------------------------------------------

test "x$VIDEO_SUPPORT" = "x" && VIDEO_SUPPORT="none"

dnl ===========================================================================
dnl Audio device checks
dnl ===========================================================================

AUDIO_SUPPORT=""

dnl ---------------------------------------------------------------------------
dnl Open Sound System
dnl ---------------------------------------------------------------------------

HAVE_OSS="no"

AC_REQUIRE_CPP
AC_CHECK_HEADERS(sys/soundcard.h, HAVE_OSS=yes,)
AC_CHECK_HEADERS(machine/soundcard.h, HAVE_OSS=yes)

AC_MSG_CHECKING(for OSS)
AC_MSG_RESULT($HAVE_OSS)

if test "x$HAVE_OSS" = "xyes"; then
  AC_DEFINE(HAVE_OSS, 1, [Define to compile with OSS support])
  AUDIO_SUPPORT="${AUDIO_SUPPORT}OSS "
fi

dnl ---------------------------------------------------------------------------
dnl ESD (Gnome sound server) - FIXME
dnl ---------------------------------------------------------------------------

HAVE_ESD="yes"
ESD_LIBS=""

AC_CHECK_LIB(esd, esd_record_stream_fallback, ESD_LIBS="-lesd", HAVE_ESD="no")
if test "x$HAVE_ESD" = "xyes"; then
  AC_DEFINE(HAVE_LIBESD, 1, [Define if ESD lib is present])
  AUDIO_SUPPORT="${AUDIO_SUPPORT}ESD "
fi

AC_SUBST(ESD_LIBS)

dnl ---------------------------------------------------------------------------
dnl ARTS (KDE sound server).
dnl ---------------------------------------------------------------------------

HAVE_ARTS="no"
AC_MSG_CHECKING(for ARTS)

ARTS_VERSION=`artsc-config --version`
if test $? -eq 0; then
  ARTS_CFLAGS=`artsc-config --cflags`
  ARTS_LIBS=`artsc-config --libs`
  SAVE_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $ARTS_CFLAGS $ARTS_LIBS"
  AC_TRY_LINK([#include <artsc.h>],, HAVE_ARTS="yes")
  CFLAGS="$SAVE_CFLAGS"
fi

if test "x$HAVE_ARTS" = "xno"; then
  AC_MSG_RESULT([no])
else
  AC_MSG_RESULT($ARTS_VERSION)
  AC_SUBST(ARTS_CFLAGS)
  AC_SUBST(ARTS_LIBS)
  AC_DEFINE(HAVE_ARTS, 1, [Define if ARTS sound server is present])
  AUDIO_SUPPORT="${AUDIO_SUPPORT}ARTS "
fi

dnl ---------------------------------------------------------------------------

test "x$AUDIO_SUPPORT" = "x" && AUDIO_SUPPORT="none"

dnl ===========================================================================
dnl X11 checks
dnl ===========================================================================

AC_PATH_XTRA
if test "x$X_CFLAGS" = "x-DX_DISPLAY_MISSING"; then
  AC_MSG_ERROR(cannot find X11)
fi

AC_SUBST(X_CFLAGS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)

dnl Macros and other pieces stolen from JWZ's xscreensaver package.

AC_DEFUN(CHECK_X_HEADER, [
  SAVE_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  AC_CHECK_HEADER([$1],[$2],[$3],[$4])
  CPPFLAGS="$SAVE_CPPFLAGS"])

AC_DEFUN(CHECK_X_LIB, [
  SAVE_CPPFLAGS="$CPPFLAGS"
  SAVE_LDFLAGS="$LDFLAGS"
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  LDFLAGS="$LDFLAGS $X_LIBS $X_EXTRA_LIBS"
  AC_CHECK_LIB([$1],[$2],[$3],[$4],[$5])
  CPPFLAGS="$SAVE_CPPFLAGS"
  LDFLAGS="$SAVE_LDFLAGS"])

dnl ---------------------------------------------------------------------------
dnl DPMS extension (to disable screensaver)
dnl ---------------------------------------------------------------------------

HAVE_DPMS=no

AC_ARG_WITH(dpms-ext,
  AC_HELP_STRING([--with-dpms-ext],
    [Include support for the DPMS extension (yes).]),
  [with_dpms="$withval"], [with_dpms=yes])

if test "x$with_dpms" = "xyes"; then
  CHECK_X_HEADER(X11/extensions/dpms.h, [HAVE_DPMS=yes],,
    [#include <X11/Xlib.h>])
  if test "x$HAVE_DPMS" = "xyes"; then
    # first look in -lXext (this is where it is in XFree86 4.0)
    CHECK_X_LIB(Xext, DPMSInfo, [X_XDPMS_LIBS="-lXext"], [HAVE_DPMS=no],)
    # if that failed, look in -lXdpms (this is where it was in XFree86 3.x)
    if test "x$HAVE_DPMS" = "xno"; then
      CHECK_X_LIB(Xdpms, DPMSInfo, [HAVE_DPMS=yes; X_DPMS_LIBS="-lXdpms"],
        [true], [-lXext])
    fi
  fi
  if test "x$HAVE_DPMS" = "xyes"; then
    AC_DEFINE(HAVE_DPMS_EXTENSION, 1, [Define if present])
    AC_SUBST(X_DPMS_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl DGA extension (DMA overlay without Xv)
dnl ---------------------------------------------------------------------------

HAVE_DGA=no

AC_ARG_WITH(xf86dga-ext,
  AC_HELP_STRING([--with-xf86dga-ext],
    [Include support for the DGA extension (yes).]),
  [with_dga="$withval"], [with_dga=yes])

if test "x$with_dga" = "xyes"; then
  CHECK_X_HEADER(X11/extensions/xf86dga.h, [HAVE_DGA=yes],,
    [#include <X11/Xlib.h>])
  if test "x$HAVE_DGA" = "xyes"; then
    CHECK_X_LIB(Xxf86dga, XF86DGAQueryExtension,
      [X_XF86DGA_LIBS="-lXxf86dga"], [HAVE_DGA=no], [-lXext])
  fi
  if test "x$HAVE_DGA" = "xyes"; then
    AC_DEFINE(HAVE_DGA_EXTENSION, 1, [Define if present])
    AC_SUBST(X_XF86DGA_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl VidMode extension (XF86Config Modelines for fullscreen)
dnl ---------------------------------------------------------------------------

HAVE_VIDMODE=no

AC_ARG_WITH(xf86vmode-ext,
  AC_HELP_STRING([--with-xf86vmode-ext],
    [Include support for the VidMode extension (yes).]),
  [with_vidmode="$withval"], [with_vidmode=yes])

if test "x$with_vidmode" = "xyes"; then
  CHECK_X_HEADER(X11/extensions/xf86vmode.h, [HAVE_VIDMODE=yes],,
    [#include <X11/Xlib.h>])
  if test "x$HAVE_VIDMODE" = "xyes"; then
    CHECK_X_LIB(Xxf86vm, XF86VidModeGetViewPort,
      [X_XF86VMODE_LIBS="-lXxf86vm"], [HAVE_VIDMODE=no], [-lXext])
  fi
  if test "x$HAVE_VIDMODE" = "xyes"; then
    AC_DEFINE(HAVE_VIDMODE_EXTENSION, 1, [Define if present])
    AC_SUBST(X_XF86VMODE_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl Xv extension (video windows and hardware scaler)
dnl ---------------------------------------------------------------------------

HAVE_XV=no

AC_ARG_WITH(xv-ext,
  AC_HELP_STRING([--with-xv-ext],
    [Include support for the XVideo extension (yes).]),
  [with_xv="$withval"], [with_xv=yes])

if test "x$with_xv" = "xyes"; then
  CHECK_X_HEADER(X11/extensions/Xv.h, [HAVE_XV=yes],,
    [#include <X11/Xlib.h>])
  if test "x$HAVE_XV" = "xyes"; then
    CHECK_X_LIB(Xv, XvShmPutImage, [X_XV_LIBS="-lXv"],
      [HAVE_XV=no], [-lXext])
  fi
  if test "x$HAVE_XV" = "xyes"; then
    AC_DEFINE(HAVE_XV_EXTENSION, 1, [Define if present])
    VIDEO_SUPPORT="${VIDEO_SUPPORT}XVideo "
    AC_SUBST(X_XV_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl Xinerama extension
dnl ---------------------------------------------------------------------------

HAVE_XINERAMA=no

AC_ARG_WITH(xinerama-ext,
  AC_HELP_STRING([--with-xinerama-ext],
    [Include support for the Xinerama extension (yes).]),
  [with_xinerama="$withval"], [with_xinerama=yes])

if test "x$with_xinerama" = "xyes"; then
  # XFree86 implementation
  CHECK_X_HEADER(X11/extensions/Xinerama.h, [
    CHECK_X_LIB(Xinerama, XineramaQueryExtension, [
      HAVE_XINERAMA=XFree86;
      AC_DEFINE(HAVE_XFREE86_XINERAMA_EXTENSION, 1, [Define if present])
      X_XINERAMA_LIBS="-lXinerama"],
      [true], [-lXext])],,
    [#include <X11/Xlib.h>])
  if test "x$HAVE_XINERAMA" = "xno"; then
    # Solaris implementation
    CHECK_X_HEADER(X11/extensions/xinerama.h, [
      CHECK_X_LIB(Xext, XineramaGetInfo, [
        HAVE_XINERAMA=Solaris;
        AC_DEFINE(HAVE_SOLARIS_XINERAMA_EXTENSION, 1, [Define if present])
        X_XINERAMA_LIBS="-lXinerama"],
      [true], [-lXext])],,
    [#include <X11/Xlib.h>])
  fi
  if test "x$HAVE_XINERAMA" != "xno"; then
    AC_DEFINE(HAVE_XINERAMA_EXTENSION, 1, [Define if present])
    AC_SUBST(X_XINERAMA_LIBS)
  fi
fi

dnl ===========================================================================
dnl Libraries
dnl ===========================================================================

dnl ---------------------------------------------------------------------------
dnl Gnome libs
dnl ---------------------------------------------------------------------------

GNOME_COMPILE_WARNINGS
AM_GCONF_SOURCE_2

pkg_modules="gtk+-2.0 >= 2.4 libgnomeui-2.0 libglade-2.0 gconf-2.0"
PKG_CHECK_MODULES(PACKAGE, [$pkg_modules])
AC_SUBST(PACKAGE_CFLAGS)
AC_SUBST(PACKAGE_LIBS)

AC_PATH_PROG(GDK_PIXBUF_CSOURCE, gdk-pixbuf-csource)
test -z "$GDK_PIXBUF_CSOURCE" && AC_MSG_ERROR([
*** To create icons we need the gdk-pixbuf-csource tool
*** which is installed from GTK+ 2.0's gdk-pixbuf package.
])

dnl ---------------------------------------------------------------------------
dnl VBI decoding library
dnl ---------------------------------------------------------------------------

HAVE_ZVBI="no"

PKG_CHECK_MODULES(ZVBI, [zvbi-0.2 >= 0.2.9],
  AC_DEFINE(HAVE_LIBZVBI, 1, [Define if ZVBI lib is present])
  HAVE_ZVBI="yes", HAVE_ZVBI="no")
AC_SUBST(ZVBI_CFLAGS)
AC_SUBST(ZVBI_LIBS)

AM_CONDITIONAL(HAVE_LIBZVBI, test "x$HAVE_ZVBI" = "xyes")

test "x$HAVE_ZVBI" = "xyes" && \
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD teletext"

dnl ---------------------------------------------------------------------------
dnl Check for Gnome unicode library or libc 2.1.
dnl (Teletext URE search wchar_t ctype.h functions)
dnl ---------------------------------------------------------------------------

AC_MSG_CHECKING(whether we are using the GNU C Library 2.1 or newer)

AC_EGREP_CPP([GNU 98765876],[
#include <features.h>
#ifdef __GNU_LIBRARY__
 #if (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 1) || (__GLIBC__ > 2)
  GNU 98765876
 #endif
#endif
],[
  AC_MSG_RESULT([yes])
  AC_DEFINE(HAVE_GLIBC21, 1, [Define if you have GNU C Lib 2.1+])
],[
  AC_MSG_RESULT([no])
  AC_MSG_CHECKING(for unicode library)
  UNICODE_VERSION=`unicode-config --version`
  if test $? -eq 0; then
    AC_DEFINE(HAVE_LIBUNICODE, 1, [Define if you have libunicode])
    AC_MSG_RESULT($UNICODE_VERSION)
    UNICODE_CFLAGS=`unicode-config --cflags`
    UNICODE_LIBS=`unicode-config --libs`
    AC_SUBST(UNICODE_CFLAGS)
    AC_SUBST(UNICODE_LIBS)
  else
    AC_MSG_RESULT([not present - Teletext search disabled])
  fi
])

dnl ---------------------------------------------------------------------------
dnl JPEG library (screenshots)
dnl ---------------------------------------------------------------------------

HAVE_JPEG="yes"
JPEG_LIB=""

AC_CHECK_LIB(jpeg, jpeg_destroy_compress, JPEG_LIB="-ljpeg", HAVE_JPEG="no")
dnl The screenshot plugin requires libjpeg
if test "x$HAVE_JPEG" = "xyes"; then
  AC_DEFINE(HAVE_LIBJPEG, 1, [Define if JPEG lib is present])
fi

AC_SUBST(JPEG_LIB)

dnl ---------------------------------------------------------------------------
dnl PNG library (Teletext PNG export)
dnl ---------------------------------------------------------------------------

HAVE_PNG="yes"
PNG_LIB=""

AC_CHECK_LIB(png, png_destroy_write_struct,
	 PNG_LIB="-lpng -lz -lm", HAVE_PNG="no", -lz -lm)
if test "x$HAVE_PNG" = "xyes"; then
  AC_DEFINE(HAVE_LIBPNG, 1, [Define if PNG lib is present])
fi

AC_SUBST(PNG_LIB)

dnl ---------------------------------------------------------------------------
dnl RTE library (mpeg plugin, real time a/v encoding)
dnl ---------------------------------------------------------------------------

dnl Doesn't work reliable on FreeBSD
if test "x$enable_bktr" != "xyes"; then
  SAVE_LIBS=$LIBS
  HAVE_RTE="0.5"
  AC_CHECK_LIB(rte, rte_parameters_set,, [HAVE_RTE="no"])
  AC_EGREP_HEADER(rte_parameters_set, librte.h,, [HAVE_RTE="no"])
  if test "x$HAVE_RTE" != "xno"; then
    PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD record"
    AC_DEFINE(HAVE_LIBRTE, 1, [Define if RTE lib 0.5 is present])
    RTE_LIB="-lrte"
  fi
  AC_SUBST(RTE_LIB)
  LIBS="$SAVE_LIBS"
else
  HAVE_RTE="disabled"
fi

dnl ---------------------------------------------------------------------------
dnl lirc_client library (remote controls)
dnl ---------------------------------------------------------------------------

if test "x$enable_bktr" = "xyes"; then
dnl Need replacement
  HAVE_LIRC="not available"
else
  HAVE_LIRC="yes"
  AC_REQUIRE_CPP
  AC_CHECK_LIB(lirc_client, lirc_init,
    AC_EGREP_HEADER(lirc_init, lirc/lirc_client.h, true, HAVE_LIRC=no),
      HAVE_LIRC=no,)
  if test "x$HAVE_LIRC" = "xyes"; then
    PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD alirc"
    AC_DEFINE(HAVE_LIRC, 1, [Define if LIRC client lib is present])
    LIRC_LIB="-llirc_client"
  fi
  AC_SUBST(LIRC_LIB)
fi

dnl ---------------------------------------------------------------------------
dnl Python support (our script language)
dnl ---------------------------------------------------------------------------

AC_PYTHON_CHECK

dnl ----------------------------------------------------------------------
dnl Check for libxml2 (src/zconf)
dnl ----------------------------------------------------------------------

AC_MSG_CHECKING([for libxml2])
HAVE_LIBXML="no"

LIBXML_VERSION=`xml2-config --version`
if test $? -eq 0; then
  LIBXML_CFLAGS=`xml2-config --cflags`
  LIBXML_LIBS=`xml2-config --libs`
  XML_LIB="xml2"
  SAVE_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $LIBXML_CFLAGS $LIBXML_LIBS"
  AC_TRY_LINK([#include <libxml/parser.h>],, HAVE_LIBXML="yes")
  CFLAGS="$SAVE_CFLAGS"
fi

AC_MSG_RESULT($LIBXML_VERSION)

if test "x$HAVE_LIBXML" = "xno"; then
  AC_MSG_ERROR([This version of Zapping requires libxml2])
fi

AC_SUBST(LIBXML_CFLAGS)
AC_SUBST(LIBXML_LIBS)

dnl ---------------------------------------------------------------------------
dnl Native language support
dnl ---------------------------------------------------------------------------

GETTEXT_PACKAGE=AC_PACKAGE_NAME
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Package name])

ALL_LINGUAS="de es fr it nl"
dnl da, pl, sv need update

AM_GLIB_GNU_GETTEXT

dnl ---------------------------------------------------------------------------
dnl Documentation
dnl ---------------------------------------------------------------------------

SCROLLKEEPER_BUILD_REQUIRED=0.3.5
AC_SUBST(SCROLLKEEPER_BUILD_REQUIRED)

AC_PATH_PROG(SCROLLKEEPER_CONFIG, [scrollkeeper-config], [no])
if test "x$SCROLLKEEPER_CONFIG" = "xno"; then
  AC_MSG_ERROR([Couldn't find scrollkeeper-config. Download the
  appropriate package for your distribution or get the source
  tarball from http://scrollkeeper.sourceforge.net])
fi

dnl Stolen from glib/configure.in

BUILD_MAN=yes
AC_PATH_PROG([XSLTPROC], [xsltproc])
if test -z "$XSLTPROC"; then
  BUILD_MAN=no
fi
dnl Check for DocBook DTD and stylesheets in the local catalog.
JH_CHECK_XML_CATALOG([-//OASIS//DTD DocBook XML V4.1.2//EN],
  [DocBook XML DTD V4.1.2],, BUILD_MAN=no)
JH_CHECK_XML_CATALOG([http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl],
  [DocBook XSL Stylesheets],, BUILD_MAN=no)
AM_CONDITIONAL(BUILD_MAN, test "x$BUILD_MAN" = "xyes")

dnl ---------------------------------------------------------------------------

dnl Setup the compilation flags

# Warnings are not enabled by default, they must be added to CFLAGS
# at configure or autogen.sh time by the maintainer.
WARN_CFLAGS="-W -Wall -Wunused -Wmissing-prototypes -Wmissing-declarations \
  -Wdeclaration-after-statement -Wundef -Wendif-labels -Wshadow \
  -Wfloat-equal -Wpointer-arith -Wwrite-strings \
  -Wbad-function-cast -Wcast-qual -Wcast-align \
  -Winline -Wconversion" # -Wpadded

dnl XXX maintainer only, see list
dnl DEPR_CFLAGS="\
dnl  -DG_DISABLE_DEPRECATED \
dnl  -DGTK_DISABLE_DEPRECATED \
dnl  -DGDK_DISABLE_DEPRECATED \
dnl  -DGDK_PIXBUF_DISABLE_DEPRECATED \
dnl  -DGNOME_DISABLE_DEPRECATED \
dnl "

dnl Note $prefix and derived variables must not be expanded in
dnl configure but only in Makefiles. They are, in fact, undefined
dnl at this point.
DIR_CFLAGS="\
  -DPACKAGE_DATA_DIR=\\\"\${datadir}\\\" \
  -DPACKAGE_LOCALE_DIR=\\\"\${datadir}/locale\\\" \
  -DPACKAGE_PIXMAPS_DIR=\\\"\${datadir}/pixmaps/\${PACKAGE}\\\"\
  -DPACKAGE_LIB_DIR=\\\"\${prefix}/lib/\${PACKAGE}\\\" \
  -DPACKAGE_ZSFB_DIR=\\\"\${DESTDIR}\${sbindir}\\\" \
"

DEFAULT_CFLAGS="-D_GNU_SOURCE $DEPR_CFLAGS $X_CFLAGS $DIR_CFLAGS"
AC_SUBST(DEFAULT_CFLAGS)

PACKAGE_PIXMAPS_DIR="\${prefix}/\${DATADIRNAME}/pixmaps/\${PACKAGE}"
AC_SUBST(PACKAGE_PIXMAPS_DIR)

PACKAGE_LIB_DIR="\${prefix}/lib/\${PACKAGE}"
AC_SUBST(PACKAGE_LIB_DIR)

PLUGIN_DEFAULT_DIR="\${PACKAGE_LIB_DIR}/plugins"
AC_SUBST(PLUGIN_DEFAULT_DIR)

PLUGIN_DEFAULT_FLAGS="$DEFAULT_CFLAGS"
AC_SUBST(PLUGIN_DEFAULT_FLAGS)

COMMON_INCLUDES="$PY_CFLAGS $PACKAGE_CFLAGS $UNICODE_CFLAGS $ARTS_CFLAGS"
AC_SUBST(COMMON_INCLUDES)

dnl ---------------------------------------------------------------------------

AC_OUTPUT([
Makefile
zapping.spec
common/Makefile
libtv/Makefile
libtv/mmx/Makefile
libtv/sse/Makefile
libtv/avec/Makefile
libvbi/Makefile
src/Makefile
po/Makefile.in
glade/Makefile
pixmaps/Makefile
zapping_setup_fb/Makefile
zapping_setup_fb/zapping_fix_overlay
plugins/Makefile
plugins/alirc/Makefile
plugins/mpeg/Makefile
plugins/screenshot/Makefile
plugins/teletext/Makefile
help/Makefile
help/man/Makefile
help/C/Makefile
test/Makefile
])

dnl plugins/deinterlace/Makefile
dnl plugins/deinterlace/DI_GreedyH/Makefile
dnl plugins/deinterlace/DI_Misc/Makefile
dnl plugins/deinterlace/DI_MoComp2/Makefile
dnl plugins/deinterlace/DI_TomsMoComp/Makefile

dnl ---------------------------------------------------------------------------

echo "
        Optional packages
        -------------------------------------------------------------
        Video devices                       $VIDEO_SUPPORT
        Audio devices                       $AUDIO_SUPPORT
        PAM                                 $HAVE_PAM
        DPMS                                $HAVE_DPMS
        DGA                                 $HAVE_DGA
        VidMode                             $HAVE_VIDMODE
        XVideo                              $HAVE_XV
        Xinerama                            $HAVE_XINERAMA
        SIMD                                $SIMD_SUPPORT
        libzvbi                             $HAVE_ZVBI
        libpng                              $HAVE_PNG
        librte                              $HAVE_RTE
        liblirc_client                      $HAVE_LIRC
        libjpeg                             $HAVE_JPEG

        Plugins: $PLUGINS_TO_BUILD
"
