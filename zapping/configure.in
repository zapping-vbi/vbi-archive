dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(zapping, 0.7)
AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

AM_PROG_LIBTOOL

test -e site_def.h || cat <<EOF >site_def.h
/* Site specific definitions */

#ifndef SITE_DEF_H
#define SITE_DEF_H
#endif /* SITE_DEF_H */
EOF

dnl These are the plugins we can build, they depend on the present
dnl libs.
PLUGINS_TO_BUILD="template lirc"

dnl ------------------------------------------------------------------------
dnl enable X extensions
dnl ------------------------------------------------------------------------
AC_MSG_CHECKING(whether to enable X extensions)
AC_ARG_ENABLE(x_extensions,
  AC_HELP_STRING([--disable-x-extensions], [Disable all X extensions]),
  enable_x_extensions="$enableval", enable_x_extensions="yes")
AC_MSG_RESULT($enable_x_extensions)
if test "x$enable_x_extensions" = "xno"; then
  AC_DEFINE(DISABLE_X_EXTENSIONS, 1, [Duh])
else
  X_DGA_LIBS="-lXxf86dga -lXxf86vm"
  AC_SUBST(X_DGA_LIBS)
fi

dnl ------------------------------------------------------------------------
dnl Remove all the V4L(2) stuff from the compilation if not Linux
dnl ------------------------------------------------------------------------
AC_MSG_CHECKING(whether to build the Video4Linux backends)
AC_ARG_ENABLE(v4l,
  AC_HELP_STRING([--enable-v4l], [Include the V4L and V4L2 controllers]),
  enable_vl4="$enableval", enable_v4l="auto")

if test "x$enable_v4l" = "xauto"; then
  if test "x`uname`" = "xLinux"; then
    enable_v4l=yes
  else
    enable_v4l=no
  fi
fi

AC_MSG_RESULT($enable_v4l)
if test "x$enable_v4l" = "xyes"; then
  AC_DEFINE(ENABLE_V4L, 1, [Define to build with V4L support])
fi

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_CHECK_FUNCS(stpcpy)

dnl X11 checks
AC_PATH_XTRA
if test "-DX_DISPLAY_MISSING" = "$X_CFLAGS"; then
  AC_MSG_ERROR(cannot find X11)
fi
dnl Force inclusion of the common path
if test "x`echo $X_LIBS | grep /usr/X11R6/lib`" = "x"; then
  X_LIBS="$X_LIBS -L/usr/X11R6/lib"
fi
AC_SUBST(X_CFLAGS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)
AC_SUBST(x_libraries)

dnl ----------------------------------------------------------------------
dnl Unicode lib
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING(for unicode)
HAVE_UNICODE="no"
UNICODE_VERSION=`unicode-config --version`
if test $? -eq 0; then
  UNICODE_CFLAGS=`unicode-config --cflags`
  UNICODE_LIBS=`unicode-config --libs`
  SAVE_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $UNICODE_CFLAGS $UNICODE_LIBS"
  AC_TRY_LINK([#include <unicode.h>],, HAVE_UNICODE="yes")
  CFLAGS="$SAVE_CFLAGS"
fi
test $HAVE_UNICODE = "no" && AC_MSG_ERROR([This version of Zapping requires
        libunicode: ftp://ftp.gnome.org/pub/GNOME/unstable/sources])

AC_SUBST(UNICODE_CFLAGS)
AC_SUBST(UNICODE_LIBS)
AC_MSG_RESULT($UNICODE_VERSION)

dnl -----------------------------------------------------------------------
dnl Profiling
dnl -----------------------------------------------------------------------
AC_MSG_CHECKING(whether to include profiling info in the executable)
AC_ARG_ENABLE(profiling,
  AC_HELP_STRING([--enable-profiling], [Include profiling info in the executable]),
  enable_profiling="$enableval", enable_profiling="no")
AC_MSG_RESULT($enable_profiling)
if test "x$enable_profiling" = "xyes"; then
  CFLAGS="-pg -a $CFLAGS"
fi
AC_ARG_ENABLE(ccmalloc,
  AC_HELP_STRING([--enable-ccmalloc], [Link with ccmalloc]),
  CCMALLOC=-lccmalloc, CCMALLOC=)
AC_SUBST(CCMALLOC)

dnl ---------------------------------------------------------------------
dnl consolehelper, PAM authentication for zapping_setup_fb
dnl ---------------------------------------------------------------------
HAVE_PAM="no"
AC_MSG_CHECKING(whether to enable PAM support)
AC_ARG_ENABLE(pam,
  AC_HELP_STRING([--enable-pam], [Enable PAM support]),
  enable_pam="$enableval", enable_pam="yes")
AC_MSG_RESULT($enable_pam)
if test "x$enable_pam" = "xyes"; then
  AC_PATH_PROG(CONSOLEHELPER_LOCATION, consolehelper, "")
  if test "x$CONSOLEHELPER_LOCATION" = "x"; then
    AC_MSG_RESULT([consolehelper not found, using setuid binary])
  fi
  HAVE_PAM="yes"
fi
AC_SUBST(CONSOLEHELPER_LOCATION)
AM_CONDITIONAL(SUID_ZSFB, test x$CONSOLEHELPER_LOCATION = x)

dnl ----------------------------------------------------------------------
dnl Check which arch is present, and enable MMX support
dnl ----------------------------------------------------------------------
HAVE_MMX="no"
case "$host" in
i?86-* | k?-*) dnl catch i386,i486,i586,i686,k6,k7
  AC_DEFINE(__i386__, 1, [host]) 
  HAVE_MMX="yes";;
alpha*-*) AC_DEFINE(__alpha__, 1, [host]);;
sparc-*) 
  AC_DEFINE(__sparc__, 1, [host]);;
ppc-*)
  AC_DEFINE(__ppc__, 1, [host]);;
powerpc-*)
  AC_DEFINE(__ppc__, 1, [host]);;
*)
  ;;
esac

if test "x$HAVE_MMX" = "xyes"; then
  AC_DEFINE(USE_MMX, 1, [Define to use MMX optimized code])
  AC_PATH_PROG(ASLOCATION, "as")
  if test "x$ASLOCATION" != "x"; then
    ASVERSION=`$ASLOCATION --version | grep GNU`
    if test "x$ASVERSION" != "x"; then
      AC_DEFINE(HAVE_GAS, 1, [Define if GNU as is present to compile MMX code])
    fi
  fi
fi

AM_CONDITIONAL(BUILD_GEN_CONV, test "x$ASVERSION" != "x")

GNOME_COMPILE_WARNINGS

pkg_modules="libgnomeui-2.0 libglade-2.0"
PKG_CHECK_MODULES(PACKAGE, [$pkg_modules])
AC_SUBST(PACKAGE_CFLAGS)
AC_SUBST(PACKAGE_LIBS)

dnl ----------------------------------------------------------------------
dnl Check for the Xv extension
dnl ----------------------------------------------------------------------
XV_PRESENT=""
AC_CHECK_LIB(Xv, XvShmPutImage, XV_PRESENT="yes",, $PACKAGE_LIBS)
if test "x$XV_PRESENT" = "xyes"; then
  AC_DEFINE(HAVE_LIBXV, 1, [Define if XVideo lib is present])
  X_XV_LIBS="-lXv"
  AC_SUBST(X_XV_LIBS)
fi

dnl ----------------------------------------------------------------------
dnl Check for the DPMS extension
dnl ----------------------------------------------------------------------
DPMS_PRESENT=""
AC_CHECK_LIB(Xdpms, DPMSQueryExtension, DPMS_PRESENT="yes",, $GTK_LIBS)
if test "x$DPMS_PRESENT" = "xyes"; then
  AC_DEFINE(HAVE_LIBXDPMS, 1, [Define if Xdpms lib is present])
  X_XDPMS_LIBS="-lXdpms"
  AC_SUBST(X_XDPMS_LIBS)
fi
if test "x$DPMS_PRESENT" = "x"; then
  AC_CHECK_LIB(Xext, DPMSQueryExtension, DPMS_PRESENT="yes",, $GTK_LIBS)
  if test "x$DPMS_PRESENT" = "xyes"; then
    AC_DEFINE(HAVE_LIBXDPMS, 1, [Define if Xdpms lib is present])
    X_XDPMS_LIBS="-lXext"
    AC_SUBST(X_XDPMS_LIBS)
  fi
fi

dnl ----------------------------------------------------------------------
dnl Check for vbi decoding library
dnl ----------------------------------------------------------------------
HAVE_ZVBI="yes"
dnl check for function and declaration in newest version
AC_CHECK_LIB(zvbi, vbi_decoder_new,
  AC_EGREP_HEADER(vbi_decoder, libzvbi.h, true, HAVE_ZVBI=no),
    HAVE_ZVBI=no, $UNICODE_LIBS)
if test "$HAVE_ZVBI" = "yes"; then
  AC_DEFINE(HAVE_LIBZVBI, 1, [Define if ZVBI lib is present])
  ZVBI_LIB="-lzvbi"
else
  AC_MSG_WARN([*** ZVBI library not found, VBI will be disabled ***])
fi
AC_SUBST(ZVBI_LIB)

dnl ----------------------------------------------------------------------
dnl Check for the existance of ARTS (KDE sound server)
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING(for ARTS)
HAVE_ARTS_TEXT="no"
ARTS_VERSION=`artsc-config --version`
if test $? -eq 0; then
  ARTS_CFLAGS=`artsc-config --cflags`
  ARTS_LIBS=`artsc-config --libs`
  SAVE_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $ARTS_CFLAGS $ARTS_LIBS"
  AC_TRY_LINK([#include <artsc.h>],, HAVE_ARTS_TEXT="yes")
  CFLAGS="$SAVE_CFLAGS"
fi
if test $HAVE_ARTS_TEXT = "no"; then
  AC_MSG_RESULT([not found])
else
  AC_MSG_RESULT($ARTS_VERSION)
  AC_SUBST(ARTS_CFLAGS)
  AC_SUBST(ARTS_LIBS)
  AC_DEFINE(HAVE_ARTS, 1, [Define if ARTS sound server is present])
fi

dnl ----------------------------------------------------------------------
dnl Check for OSS.
dnl ----------------------------------------------------------------------
HAVE_OSS="no"
AC_REQUIRE_CPP
AC_CHECK_HEADERS(sys/soundcard.h, HAVE_OSS=yes, )
AC_CHECK_HEADERS(machine/soundcard.h, HAVE_OSS=yes, )
if test "$HAVE_OSS" = "yes"; then
  AC_DEFINE(USE_OSS, 1, [Define to compile with OSS support])
else
  AC_MSG_WARN([*** OSS support not available ***])
fi

dnl ----------------------------------------------------------------------
dnl Check the JPEG writing lib
dnl ----------------------------------------------------------------------
JPEG_LIB=""
HAVE_JPEG="yes"
AC_CHECK_LIB(jpeg, jpeg_destroy_compress, JPEG_LIB="-ljpeg", HAVE_JPEG="no")
dnl The screenshot plugin requires libjpeg
if test "$HAVE_JPEG" = "yes"; then
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD screenshot"
  AC_DEFINE(HAVE_LIBJPEG, 1, [Define if JPEG lib is present])
fi
AC_SUBST(JPEG_LIB)

dnl ----------------------------------------------------------------------
dnl Check the PNG writing lib
dnl ----------------------------------------------------------------------
PNG_LIB=""
HAVE_PNG="yes"
AC_CHECK_LIB(png, png_destroy_write_struct, PNG_LIB="-lpng -lz -lm", HAVE_PNG="no", -lz -lm)
dnl Zapzilla PNG export
if test "x$HAVE_PNG" = "xyes"; then
  AC_DEFINE(HAVE_LIBPNG, 1, [Define if PNG lib is present])
fi
AC_SUBST(PNG_LIB)

dnl ----------------------------------------------------------------------
dnl Check for RTE, the MPEG encoder
dnl ----------------------------------------------------------------------
HAVE_RTE="0.5"
AC_CHECK_LIB(rte, rte_codec_parameters_set,
  AC_EGREP_HEADER(rte_codec_parameters_set, librte.h, true, HAVE_RTE=no),
    HAVE_RTE=no,)
dnl The mpeg plugin requires RTE
if test "$HAVE_RTE" != "no"; then
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD mpeg"
  AC_DEFINE(HAVE_LIBRTE5, 1, [Define if RTE lib 0.5 is present])
  RTE_LIB="-lrte"
else
  HAVE_RTE="0.4"
  AC_CHECK_LIB(rte-0.4, rte_option_set_menu,
    AC_EGREP_HEADER(rte_option_set_menu, rte.h, true, HAVE_RTE=no),
      HAVE_RTE=no,)
  dnl The mpeg plugin requires RTE
  if test "$HAVE_RTE" != "no"; then
    PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD mpeg"
    AC_DEFINE(HAVE_LIBRTE4, 1, [Define if RTE lib 0.4 is present])
    RTE_LIB="-lrte-0.4"
  else
    AC_MSG_WARN([*** RTE not found, MPEG capture will be disabled ***])
  fi
fi
AC_SUBST(RTE_LIB)

dnl ----------------------------------------------------------------------
dnl Check for lirc_client
dnl ----------------------------------------------------------------------
HAVE_LIRC="yes"
AC_REQUIRE_CPP
AC_CHECK_LIB(lirc_client, lirc_init,
  AC_EGREP_HEADER(lirc_init, lirc/lirc_client.h, true, HAVE_LIRC=no),
    HAVE_LIRC=no,)
if test "$HAVE_LIRC" = "yes"; then
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD alirc"
  AC_DEFINE(HAVE_LIRC, 1, [Define if LIRC client lib is present])
  LIRC_LIB="-llirc_client"
else
  AC_MSG_WARN([*** LIRC client support not available, not building alirc ***])
fi
AC_SUBST(LIRC_LIB)

GETTEXT_PACKAGE=zapping
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE")

dnl Add the languages which your application supports here.
ALL_LINGUAS="de en@quot es fr nl pl sv"
AM_GLIB_GNU_GETTEXT

dnl Check for python support
AC_PYTHON_CHECK

dnl Setup the compilation flags
DEFAULT_CFLAGS="-g -Wall -Wunused -Wmissing-prototypes -Wmissing-declarations -D_GNU_SOURCE -DGTK_DISABLE_DEPRECATED -DGNOME_DISABLE_DEPRECATED -DG_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGDK_PIXBUF_DISABLE_DEPRECATED $X_CFLAGS"
AC_SUBST(DEFAULT_CFLAGS)

AM_PROG_AS
AS=$CC
ASFLAGS=$DEFAULT_CFLAGS
AC_SUBST(AS)
AC_SUBST(ASFLAGS)

dnl -----------------------------------------------------------
dnl with-gnome-prefix handling, used for building packages.
dnl -----------------------------------------------------------
AC_ARG_WITH(gnome-prefix,
  [  --with-gnome-prefix     Use the given path as the Gnome prefix],
  if test ! "x$withval" = x; then
    GNOME_PREFIX=$withval
  fi)

if test "x$GNOME_PREFIX" = "x"; then
  GNOME_PREFIX=`dirname $(dirname $(which gnome-session))`
fi
AC_SUBST(GNOME_PREFIX)

if test "x${prefix}" = "xNONE"; then
  prefix=$GNOME_PREFIX
fi

dnl Paths to the various files we use.
dnl This installs the pixmaps under the same dir as the glade
dnl files. Somewhat non-standard, but keeps libglade happy.
PACKAGE_PIXMAPS_DIR="${prefix}/${DATADIRNAME}/${PACKAGE}"
AC_DEFINE_UNQUOTED(PACKAGE_PIXMAPS_DIR, "${PACKAGE_PIXMAPS_DIR}", [pd])
AC_SUBST(PACKAGE_PIXMAPS_DIR)
PACKAGE_LIB_DIR="${prefix}/lib/${PACKAGE}"
AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${PACKAGE_LIB_DIR}", [ld])
AC_SUBST(PACKAGE_LIB_DIR)
AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/${DATADIRNAME}", [pdd])
AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR,
	"${prefix}/${DATADIRNAME}/locale", [pld])

dnl Default dir for installing plugins
PLUGIN_DEFAULT_DIR="${PACKAGE_LIB_DIR}/plugins"
AC_SUBST(PLUGIN_DEFAULT_DIR)
PLUGIN_DEFAULT_FLAGS="$DEFAULT_CFLAGS -Wno-unused"
AC_SUBST(PLUGIN_DEFAULT_FLAGS)
COMMON_INCLUDES="$PY_CFLAGS $PACKAGE_CFLAGS $UNICODE_CFLAGS $ARTS_CFLAGS"
AC_SUBST(COMMON_INCLUDES)

AC_OUTPUT([
Makefile
common/Makefile
src/Makefile
po/Makefile.in
glade/Makefile
pixmaps/Makefile
zapping_setup_fb/Makefile
zapping_setup_fb/zapping_fix_overlay
plugins/Makefile
plugins/alirc/Makefile
plugins/lirc/Makefile
plugins/mpeg/Makefile
plugins/screenshot/Makefile
plugins/template/Makefile
])

echo "
	Optional package
	----------------
	VBI lib                         $HAVE_ZVBI
	JPEG lib                        $HAVE_JPEG
	PNG lib                         $HAVE_PNG
	MMX                             $HAVE_MMX
	XVideo                          $XV_PRESENT
	RTE                             $HAVE_RTE
	Lirc client                     $HAVE_LIRC
	PAM                             $HAVE_PAM
	ARTS                            $HAVE_ARTS_TEXT

	Plugins to build
	----------------"

for x in $PLUGINS_TO_BUILD; do
  echo "        "$x
done
