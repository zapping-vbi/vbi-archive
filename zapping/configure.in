dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/callbacks.c)
AM_INIT_AUTOMAKE(zapping, 0.6.0cvs)
AM_CONFIG_HEADER(config.h)

dnl Pick up the Gnome macros.
AM_ACLOCAL_INCLUDE(macros)

AM_PROG_LIBTOOL

test -e site_def.h || echo "/* Site specific definitions */" >site_def.h

dnl These are the plugins we can build, they depend on the present
dnl libs.
PLUGINS_TO_BUILD="template lirc"

dnl ---------------------------------------------------------------------------
dnl enable X extensions
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING(whether to enable X extensions)
AC_ARG_ENABLE(
	x_extensions,
	[  --disable-x-extensions  Disable all X extensions],
	enable_x_extensions="$enableval", enable_x_extensions="yes")
AC_MSG_RESULT($enable_x_extensions)
if test "x$enable_x_extensions" = "xno"; then
	AC_DEFINE(DISABLE_X_EXTENSIONS)
else
	X_DGA_LIBS="-lXxf86dga -lXxf86vm"
	AC_SUBST(X_DGA_LIBS)
fi

dnl ---------------------------------------------------------------------------
dnl enable V4L/V4L2 checks on startup of tveng
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING(whether to enable some checks on the V4L device)
AC_ARG_ENABLE(
	tveng-checks,
	[  --enable-tveng-checks   Enable some initial TVeng checks],
	enable_tveng_checks="$enableval", enable_tveng_checks="no")
AC_MSG_RESULT($enable_tveng_checks)
if test "x$enable_tveng_checks" = "xyes"; then
	AC_DEFINE(TVENG_ENABLE_IOCTL_TESTS)
fi

dnl ---------------------------------------------------------------------------
dnl Remove all the V4L(2) stuff from the compilation
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING(whether to include the v4l stuff)
AC_ARG_ENABLE(
	v4l,
	[  --enable-v4l            Include the V4L and V4L2 controllers],
	enable_vl4="$enableval", enable_v4l="yes")
AC_MSG_RESULT($enable_v4l)
if test "x$enable_v4l" = "xyes"; then
	AC_DEFINE(ENABLE_V4L)
fi

GNOME_INIT
AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

dnl ----------------------------------------------------------------------
dnl Check the JPEG writing lib
dnl ----------------------------------------------------------------------
JPEG_LIB=""
HAVE_JPEG="yes"
AC_CHECK_LIB(jpeg, jpeg_destroy_compress, JPEG_LIB="-ljpeg", HAVE_JPEG="no")
dnl The screenshot plugin requires libjpeg
if test "$HAVE_JPEG" = "yes"; then
	PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD screenshot"
	AC_DEFINE(HAVE_LIBJPEG)
fi
AC_SUBST(JPEG_LIB)

dnl ----------------------------------------------------------------------
dnl Check the PNG writing lib
dnl ----------------------------------------------------------------------
PNG_LIB=""
HAVE_PNG="yes"
AC_CHECK_LIB(png, png_destroy_write_struct, PNG_LIB="-lpng -lz", HAVE_PNG="no", -lz)
dnl Zapzilla PNG export
if test "x$HAVE_PNG" = "xyes"; then
AC_DEFINE(HAVE_LIBPNG)
fi
AC_SUBST(PNG_LIB)

dnl ----------------------------------------------------------------------
dnl Unicode lib
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING(for unicode)
UNICODE_VERSION=`unicode-config --version`
if test $? -eq 0; then
	AC_MSG_RESULT($UNICODE_VERSION)
	UNICODE_CFLAGS=`unicode-config --cflags`
	UNICODE_LIBS=`unicode-config --libs`
	AC_SUBST(UNICODE_CFLAGS)
	AC_SUBST(UNICODE_LIBS)
else
	AC_MSG_ERROR([This version of Zapping requires libunicode:
	ftp://ftp.gnome.org/pub/GNOME/unstable/sources])
fi

dnl ---------------------------------------------------------------------------
dnl Profiling
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING(whether to include profiling info in the executable)
AC_ARG_ENABLE(
	profiling,
	[  --enable-profiling      Include profiling info in the executable],
	enable_profiling="$enableval", enable_profiling="no")
AC_MSG_RESULT($enable_profiling)
if test "x$enable_profiling" = "xyes"; then
	CFLAGS="-pg $CFLAGS"
fi

dnl ---------------------------------------------------------------------
dnl consolehelper, PAM authentication for zapping_setup_fb
dnl ---------------------------------------------------------------------
AC_MSG_CHECKING(whether to enable PAM support)
AC_ARG_ENABLE(pam,
	[  --enable-pam            Enable PAM support],
	enable_pam="$enableval", enable_pam="yes")
AC_MSG_RESULT($enable_pam)
if test "x$enable_pam" = "xyes"; then
	AC_PATH_PROG(CONSOLEHELPER_LOCATION, consolehelper, "")
	if test "x$CONSOLEHELPER_LOCATION" = "x"; then
		AC_MSG_RESULT([consolehelper not found, using setuid binary])
	fi
fi
AC_SUBST(CONSOLEHELPER_LOCATION)
AM_CONDITIONAL(SUID_ZSFB, test x$CONSOLEHELPER_LOCATION = x)

dnl ----------------------------------------------------------------------
dnl Check for RTE, the MPEG encoder
dnl ----------------------------------------------------------------------
HAVE_RTE=""
AC_CHECK_LIB(rte, rte_start_encoding, HAVE_RTE="yes", HAVE_RTE="no")
dnl The mpeg plugin requires RTE
if test "$HAVE_RTE" = "yes"; then
	PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD mpeg"
	AC_DEFINE(HAVE_LIBRTE)
	RTE_LIB="-lrte"
else
	AC_MSG_WARN([*** RTE not found, MPEG capture will be disabled ***])
fi
AC_SUBST(RTE_LIB)

dnl ----------------------------------------------------------------------
dnl Check for lirc_client
dnl ----------------------------------------------------------------------
HAVE_LIRC="yes"
AC_REQUIRE_CPP
AC_CHECK_LIB(lirc_client,lirc_init,
  AC_CHECK_HEADER(lirc/lirc_client.h,true,HAVE_LIRC=no),HAVE_LIRC=no)

if test "$HAVE_LIRC" = "yes"; then
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD alirc"
  AC_DEFINE(HAVE_LIRC)
  LIRC_LIB="-llirc_client"
else
  AC_MSG_WARN([*** LIRC client support not available, not building alirc ***])
fi
AC_SUBST(LIRC_LIB)


GNOME_COMPILE_WARNINGS
GNOME_X_CHECKS

dnl ----------------------------------------------------------------------
dnl Check for the existance of gdk-pixbuf
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING(for gdk_pixbuf)
GDK_PIXBUF_VERSION=`gdk-pixbuf-config --version`
if test $? -eq 0; then
	AC_MSG_RESULT($GDK_PIXBUF_VERSION)
	GDK_PIXBUF_CFLAGS=`gdk-pixbuf-config --cflags`
	dnl Avoid including twice the result of "gtk-config --libs"
	dnl (gdk-pixbuf includes it too)
	TMP_VAR=`gtk-config --libs | sed "s/\//\\\\\\\\\//g"`
	GDK_PIXBUF_LIBS=`gdk-pixbuf-config --libs`
	GDK_PIXBUF_LIBS=`echo $GDK_PIXBUF_LIBS | sed "s/$TMP_VAR//g"`
	AC_SUBST(GDK_PIXBUF_CFLAGS)
	AC_SUBST(GDK_PIXBUF_LIBS)
else
	AC_MSG_ERROR([This version of Zapping requires GdkPixbuf])
fi

dnl ----------------------------------------------------------------------
dnl Check for the existance of libxml
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING(for libxml)
LIBXML_VERSION=`xml-config --version`
if test $? -eq 0; then
	AC_MSG_RESULT($LIBXML_VERSION)
	LIBXML_CFLAGS=`xml-config --cflags`
	LIBXML_LIBS=`xml-config --libs`
	XML_LIB="xml"
else
	LIBXML_VERSION=`xml2-config --version`
	if test $? -eq 0; then
		LIBXML_CFLAGS=`xml2-config --cflags`
		LIBXML_LIBS=`xml2-config --libs`
		XML_LIB="xml2"
	else
		AC_MSG_ERROR([This version of Zapping requires libxml:
		ftp://ftp.gnome.org/pub/GNOME/stable/sources])
	fi
fi

AC_SUBST(LIBXML_CFLAGS)
AC_SUBST(LIBXML_LIBS)

saved_cppflags="$CPPFLAGS"
saved_ldflags="$LDFLAGS"
LDFLAGS="$LDFLAGS $LIBXML_LIBS"
CPPFLAGS="$CPPFLAGS $LIBXML_CFLAGS"

dnl ----------------------------------------------------------------------
dnl Check which libxml syntax we will use (children vs. childs)
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING(which syntax to use for xml child nodes)
AC_TRY_LINK([#include <tree.h>],
[
xmlNodePtr node = 0xdeadbeef;
node->childs = NULL;
return 0;
],
AC_MSG_RESULT(chils)
AC_DEFINE(LIBXML_CHILDS),
AC_MSG_RESULT(children))

dnl ----------------------------------------------------------------------
dnl Check for existance of xmlDocGetRootElement
dnl ----------------------------------------------------------------------
AC_CHECK_LIB($XML_LIB, xmlDocGetRootElement,
	AC_DEFINE(LIBXML_xmlDocGetRootElement))

CPPFLAGS="$saved_cppflags"
LDFLAGS="$saved_ldflags"

dnl ----------------------------------------------------------------------
dnl Check which arch is present, and enable MMX support
dnl ----------------------------------------------------------------------
YUV2RGB_MMX=""
HAVE_MMX="no"
ARCH_CFLAGS=""
case "$host_alias" in
i?86-* | k?-*) dnl catch i386,i486,i586,i686,k6,k7
	AC_DEFINE(__i386__) 
	case "$host_alias" in
		i386-*) dnl who are we kidding?
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=i386";;
		i486-*)
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=i486";;
		i586-*)
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=pentium";;
		i686-*)
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=pentiumpro";;
		k6-*)
			HAVE_MMX="yes";;		
dnl			ARCH_CFLAGS="-march=k6";;
		k7-*)
			HAVE_MMX="yes";;			
dnl			ARCH_CFLAGS="-march=k7";;
	esac;;
alpha*-*) AC_DEFINE(__alpha__);;
sparc-*) 
	AC_DEFINE(__sparc__);;
ppc-*) AC_DEFINE(__ppc__);;
powerpc-*) AC_DEFINE(__ppc__);;
*) ;;
esac

if test "x$HAVE_MMX" = "xyes"; then
	AC_DEFINE(USE_MMX)
fi

AC_SUBST(ARCH_CFLAGS)

AM_PATH_LIBGLADE(,
AC_MSG_ERROR(*** Cannot find libglade in your system. Is it installed? ***),
gnome)

dnl Add the languages which your application supports here.
ALL_LINGUAS="de es fr ru"
AM_GNU_GETTEXT

dnl Set PACKAGE_*_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR,
	"${ac_default_prefix}/${DATADIRNAME}/locale")
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR,
	"${ac_default_prefix}/${DATADIRNAME}/${PACKAGE}")
  PACKAGE_LIB_DIR="${ac_default_prefix}/lib/${PACKAGE}"
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale")
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/${DATADIRNAME}/${PACKAGE}")
  PACKAGE_LIB_DIR="${prefix}/lib/${PACKAGE}"
fi

AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${PACKAGE_LIB_DIR}")

dnl ----------------------------------------------------------------------
dnl Check for the Xv extension
dnl ----------------------------------------------------------------------
XV_PRESENT=""
AC_CHECK_LIB(Xv, XvShmPutImage, XV_PRESENT="yes",, $GTK_LIBS)
if test "x$XV_PRESENT" = "xyes"; then
AC_DEFINE(HAVE_LIBXV)
X_XV_LIBS="-lXv"
AC_SUBST(X_XV_LIBS)
fi

dnl ----------------------------------------------------------------------
dnl Check for the DPMS extension
dnl ----------------------------------------------------------------------
DPMS_PRESENT=""
AC_CHECK_LIB(Xdpms, DPMSQueryExtension, DPMS_PRESENT="yes",, $GTK_LIBS)
if test "x$DPMS_PRESENT" = "xyes"; then
AC_DEFINE(HAVE_LIBXDPMS)
X_XDPMS_LIBS="-lXdpms"
AC_SUBST(X_XDPMS_LIBS)
fi
if test "x$DPMS_PRESENT" = "x"; then
AC_CHECK_LIB(Xext, DPMSQueryExtension, DPMS_PRESENT="yes",, $GTK_LIBS)
if test "x$DPMS_PRESENT" = "xyes"; then
AC_DEFINE(HAVE_LIBXDPMS)
X_XDPMS_LIBS="-lXext"
AC_SUBST(X_XDPMS_LIBS)
fi
fi

dnl Subst PACKAGE_PIXMAPS_DIR.
PACKAGE_PIXMAPS_DIR="${datadir}/pixmaps/${PACKAGE}"
AC_SUBST(PACKAGE_PIXMAPS_DIR)

dnl Default dir for installing plugins
PLUGIN_DEFAULT_DIR="${PACKAGE_LIB_DIR}/plugins"
AC_SUBST(PLUGIN_DEFAULT_DIR)
PLUGIN_DEFAULT_FLAGS="-Wall -Wno-unused -g -D_GNU_SOURCE"
AC_SUBST(PLUGIN_DEFAULT_FLAGS)

AC_SUBST(PACKAGE_LIB_DIR)

CFLAGS="-D_GNU_SOURCE $CFLAGS"

AC_OUTPUT([
zapping.spec
Makefile
macros/Makefile
pixmaps/Makefile
src/Makefile
intl/Makefile
libvbi/Makefile
po/Makefile.in
glade/Makefile
help/Makefile
help/C/Makefile
help/de/Makefile
plugins/Makefile
common/Makefile
zapping_setup_fb/Makefile
plugins/lirc/Makefile
plugins/mpeg/Makefile
plugins/screenshot/Makefile
plugins/template/Makefile
plugins/alirc/Makefile
])

echo "
	Optional package		Found
	----------------		-----
	JPEG lib			$HAVE_JPEG
	PNG lib				$HAVE_PNG
	MMX support			$HAVE_MMX
	XVideo support			$XV_PRESENT
	MPEG encoder support		$HAVE_RTE
	Lirc client support		$HAVE_LIRC

	Plugins to build
	----------------
	`echo $PLUGINS_TO_BUILD | sed "s/ /\\\\
	/g"`
"
