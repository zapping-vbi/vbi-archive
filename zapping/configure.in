dnl Process this file with autoconf to produce a configure script.
dnl $Id: configure.in,v 1.141 2003-12-08 07:20:39 mschimek Exp $

AC_INIT(zapping, 0.7cvs6,
  [http://sourceforge.net/tracker/?atid=102599&group_id=2599&func=browse])
AC_CONFIG_SRCDIR(configure.in)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_CHECK_FUNCS(strndup)
AC_CHECK_FUNCS(asprintf)
AC_CHECK_FUNCS(getopt_long)
AC_CHECK_FUNCS(program_invocation_name)

AC_DISABLE_STATIC
AM_PROG_LIBTOOL

AC_PROG_INTLTOOL(0.22)

test -e site_def.h || cat <<EOF >site_def.h
/* These defines enable various tests and other hacks
   we do not want in released packages. */

#ifndef SITE_DEF_H
#define SITE_DEF_H
/* #define AUDIO_MIXER_LOG_FP stderr */
/* #define OSS_LOG_FP stderr */
/* #define OVERLAY_CHROMA_TEST 1 */
/* #define OVERLAY_LOG_FP stderr */
/* #define TVENGEMU_ENABLE 1 */
/* #define TVENG_FORCE_FORMAT 20 */
/* #define TVENG_MIXER_VOLUME_DEBUG 1 */
/* #define X11STUFF_WM_HINTS_DEBUG 1 */
/* #define X11STUFF_VIDMODE_DEBUG 1 */
/* #define X11STUFF_SCREENSAVER_DEBUG 1 */
/* #define X11STUFF_DGA_DEBUG 1 */
/* #define XAWTV_CONFIG_TEST 1 */
/* #define ZMISC_TOOLTIP_WARNING 1 */
/* #define ZVBI_CAPTION_DEBUG 1 */
/* #define ZVIDEO_EXPOSE_TEST 1 */
#endif
EOF

dnl These are the plugins we can build, depending on the libs we find.
dnl Template and lirc need no external files.
PLUGINS_TO_BUILD=""
dnl "template lirc"

dnl ===========================================================================
dnl Video (TV) device checks
dnl ===========================================================================

dnl ---------------------------------------------------------------------------
dnl Video For Linux [Two]
dnl ---------------------------------------------------------------------------

AC_MSG_CHECKING(whether to build the Video4Linux driver interfaces)
AC_ARG_ENABLE(v4l,
  AC_HELP_STRING([--enable-v4l],
    [Include V4L and V4L2 driver interfaces (auto)]),
  enable_v4l="$enableval", enable_v4l="auto")

test "$enable_v4l" = "auto" &&
  test "`uname -s`" = "Linux" &&
    enable_v4l=yes

test "$enable_v4l" != "yes" && enable_v4l=no

AC_MSG_RESULT($enable_v4l)

if test "$enable_v4l" = "yes"; then
  AC_DEFINE(ENABLE_V4L, 1, [Define to build with V4L support])
fi

dnl ---------------------------------------------------------------------------
dnl BSD Brooktree / Meteor
dnl ---------------------------------------------------------------------------

AC_MSG_CHECKING(whether to build the Bktr/Meteor driver interfaces)
AC_ARG_ENABLE(bktr,
  AC_HELP_STRING([--enable-bktr],
    [Include Bktr/Meteor driver interfaces (auto)]),
  enable_bktr="$enableval", enable_bktr="auto")

test "$enable_bktr" = "auto" &&
  case "`uname -s`" in
  OpenBSD | FreeBSD | NetBSD | BSDi)
    enable_bktr=yes
    ;;
  *)
    ;;
  esac

test "$enable_bktr" != "yes" && enable_bktr=no

AC_MSG_RESULT($enable_bktr)

if test "$enable_bktr" = "yes"; then
  AC_DEFINE(ENABLE_BKTR, 1, [Define to build with Bktr/Meteor support])
fi

dnl ===========================================================================
dnl X11 checks
dnl ===========================================================================

AC_PATH_XTRA
if test "$X_CFLAGS" = "-DX_DISPLAY_MISSING"; then
  AC_MSG_ERROR(cannot find X11)
fi

AC_SUBST(X_CFLAGS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)

AC_DEFUN(AC_CHECK_X_HEADER, [
  SAVE_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  AC_CHECK_HEADER([$1],[$2],[$3],[$4])
  CPPFLAGS="$SAVE_CPPFLAGS"])

AC_DEFUN(AC_CHECK_X_LIB, [
  SAVE_CPPFLAGS="$CPPFLAGS"
  SAVE_LDFLAGS="$LDFLAGS"
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  LDFLAGS="$LDFLAGS $X_LIBS $X_EXTRA_LIBS"
  AC_CHECK_LIB([$1],[$2],[$3],[$4],[$5])
  CPPFLAGS="$SAVE_CPPFLAGS"
  LDFLAGS="$SAVE_LDFLAGS"])

dnl ---------------------------------------------------------------------------
dnl Check for the DPMS extension (to disable screensaver)
dnl ---------------------------------------------------------------------------

HAVE_DPMS=no

AC_ARG_WITH(dpms-ext,
  AC_HELP_STRING([--with-dpms-ext],
    [Include support for the DPMS extension (yes).]),
  [with_dpms="$withval"], [with_dpms=yes])

if test "$with_dpms" = "yes"; then
  AC_CHECK_X_HEADER(X11/extensions/dpms.h, [HAVE_DPMS=yes],,
    [#include <X11/Xlib.h>])
  if test "$HAVE_DPMS" = "yes"; then
    # first look in -lXext (this is where it is in XFree86 4.0)
    AC_CHECK_X_LIB(Xext, DPMSInfo, [X_XDPMS_LIBS="-lXext"], [HAVE_DPMS=no],)
    # if that failed, look in -lXdpms (this is where it was in XFree86 3.x)
    if test "$HAVE_DPMS" = "no"; then
      AC_CHECK_X_LIB(Xdpms, DPMSInfo, [HAVE_DPMS=yes; X_DPMS_LIBS="-lXdpms"],
        [true], [-lXext])
    fi
  fi
  if test "$HAVE_DPMS" = "yes"; then
    AC_DEFINE(HAVE_DPMS_EXTENSION, 1, [Define if present])
    AC_SUBST(X_DPMS_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl Check for the DGA extension (DMA overlay without Xv)
dnl ---------------------------------------------------------------------------

HAVE_DGA=no

AC_ARG_WITH(xf86dga-ext,
  AC_HELP_STRING([--with-xf86dga-ext],
    [Include support for the DGA extension (yes).]),
  [with_dga="$withval"], [with_dga=yes])

if test "$with_dga" = "yes"; then
  AC_CHECK_X_HEADER(X11/extensions/xf86dga.h, [HAVE_DGA=yes],,
    [#include <X11/Xlib.h>])
  if test "$HAVE_DGA" = "yes"; then
    AC_CHECK_X_LIB(Xxf86dga, XF86DGAQueryExtension,
      [X_XF86DGA_LIBS="-lXxf86dga"], [HAVE_DGA=no], [-lXext])
  fi
  if test "$HAVE_DGA" = "yes"; then
    AC_DEFINE(HAVE_DGA_EXTENSION, 1, [Define if present])
    AC_SUBST(X_XF86DGA_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl Check for the VidMode extension (XF86Config Modelines for fullscreen)
dnl ---------------------------------------------------------------------------

HAVE_VIDMODE=no

AC_ARG_WITH(xf86vmode-ext,
  AC_HELP_STRING([--with-xf86vmode-ext],
    [Include support for the VidMode extension (yes).]),
  [with_vidmode="$withval"], [with_vidmode=yes])

if test "$with_vidmode" = "yes"; then
  AC_CHECK_X_HEADER(X11/extensions/xf86vmode.h, [HAVE_VIDMODE=yes],,
    [#include <X11/Xlib.h>])
  if test "$HAVE_VIDMODE" = "yes"; then
    AC_CHECK_X_LIB(Xxf86vm, XF86VidModeGetViewPort,
      [X_XF86VMODE_LIBS="-lXxf86vm"], [HAVE_VIDMODE=no], [-lXext])
  fi
  if test "$HAVE_VIDMODE" = "yes"; then
    AC_DEFINE(HAVE_VIDMODE_EXTENSION, 1, [Define if present])
    AC_SUBST(X_XF86VMODE_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl Check for the Xv extension (video windows and hardware scaler)
dnl ---------------------------------------------------------------------------

HAVE_XV=no

AC_ARG_WITH(xv-ext,
  AC_HELP_STRING([--with-xv-ext],
    [Include support for the XVideo extension (yes).]),
  [with_xv="$withval"], [with_xv=yes])

if test "$with_xv" = "yes"; then
  AC_CHECK_X_HEADER(X11/extensions/Xv.h, [HAVE_XV=yes],,
    [#include <X11/Xlib.h>])
  if test "$HAVE_XV" = "yes"; then
    AC_CHECK_X_LIB(Xv, XvShmPutImage, [X_XV_LIBS="-lXv"],
      [HAVE_XV=no], [-lXext])
  fi
  if test "$HAVE_XV" = "yes"; then
    AC_DEFINE(HAVE_XV_EXTENSION, 1, [Define if present])
    AC_SUBST(X_XV_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl Check for the Xinerama extension (future stuff)
dnl ---------------------------------------------------------------------------

HAVE_XINERAMA=no

AC_ARG_WITH(xinerama-ext,
  AC_HELP_STRING([--with-xinerama-ext],
    [Include support for the Xinerama extension (yes).]),
  [with_xinerama="$withval"], [with_xinerama=yes])

if test "$with_xinerama" = "yes"; then
  # XFree86 implementation
  AC_CHECK_X_HEADER(X11/extensions/Xinerama.h, [
    AC_CHECK_X_LIB(Xinerama, XineramaQueryExtension, [
      HAVE_XINERAMA=XFree86;
      AC_DEFINE(HAVE_XFREE86_XINERAMA_EXTENSION, 1, [Define if present])
      X_XINERAMA_LIBS="-lXinerama"],
      [true], [-lXext])],,
    [#include <X11/Xlib.h>])
  if test "$HAVE_XINERAMA" = "no"; then
    # Solaris implementation
    AC_CHECK_X_HEADER(X11/extensions/xinerama.h, [
      AC_CHECK_X_LIB(Xext, XineramaGetInfo, [
        HAVE_XINERAMA=Solaris;
        AC_DEFINE(HAVE_SOLARIS_XINERAMA_EXTENSION, 1, [Define if present])
        X_XINERAMA_LIBS="-lXinerama"],
      [true], [-lXext])],,
    [#include <X11/Xlib.h>])
  fi
  if test "$HAVE_XINERAMA" != "no"; then
    AC_DEFINE(HAVE_XINERAMA_EXTENSION, 1, [Define if present])
    AC_SUBST(X_XINERAMA_LIBS)
  fi
fi

dnl ---------------------------------------------------------------------------
dnl Profiling
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING(whether to include profiling info in the executable)
AC_ARG_ENABLE(profiling,
  AC_HELP_STRING([--enable-profiling], [Include profiling info in the executable]),
  enable_profiling="$enableval", enable_profiling="no")
AC_MSG_RESULT($enable_profiling)
if test "x$enable_profiling" = "xyes"; then
  CFLAGS="-pg -a $CFLAGS"
fi
AC_ARG_ENABLE(ccmalloc,
  AC_HELP_STRING([--enable-ccmalloc], [Link with ccmalloc]),
  CCMALLOC=-lccmalloc, CCMALLOC=)
AC_SUBST(CCMALLOC)

dnl ---------------------------------------------------------------------------
dnl consolehelper, PAM authentication for zapping_setup_fb
dnl ---------------------------------------------------------------------------
HAVE_PAM="no"
AC_MSG_CHECKING(whether to enable PAM support)
AC_ARG_ENABLE(pam,
  AC_HELP_STRING([--enable-pam], [Enable PAM support]),
  enable_pam="$enableval", enable_pam="yes")
AC_MSG_RESULT($enable_pam)
if test "x$enable_pam" = "xyes"; then
  AC_PATH_PROG(CONSOLEHELPER_LOCATION, consolehelper, "")
  if test "x$CONSOLEHELPER_LOCATION" = "x"; then
    AC_MSG_RESULT([consolehelper not found, using setuid binary])
  fi
  HAVE_PAM="yes"
fi
AC_SUBST(CONSOLEHELPER_LOCATION)
AM_CONDITIONAL(SUID_ZSFB, test x$CONSOLEHELPER_LOCATION = x)

case "`uname -s`" in
  OpenBSD | FreeBSD | NetBSD | BSDi)
    ZSFB_OWNER="root"
    ZSFB_GROUP="wheel"
    ;;
  *) dnl Linux et al
    ZSFB_OWNER="root"
    ZSFB_GROUP="root"
    ;;
esac

AC_SUBST(ZSFB_OWNER)
AC_SUBST(ZSFB_GROUP)

dnl ---------------------------------------------------------------------------
dnl Check which arch is present, and enable MMX support
dnl ---------------------------------------------------------------------------
HAVE_MMX="no"
case "$host" in
i?86-* | k?-*) dnl catch i386,i486,i586,i686,k6,k7
  AC_DEFINE(__i386__, 1, [host]) 
  HAVE_MMX="yes";;
alpha*-*) AC_DEFINE(__alpha__, 1, [host]);;
sparc-*) 
  AC_DEFINE(__sparc__, 1, [host]);;
ppc-*)
  AC_DEFINE(__ppc__, 1, [host]);;
powerpc-*)
  AC_DEFINE(__ppc__, 1, [host]);;
*)
  ;;
esac

if test "x$HAVE_MMX" = "xyes"; then
  AC_DEFINE(USE_MMX, 1, [Define to use MMX optimized code])
  AC_PATH_PROG(ASLOCATION, "as")
  if test "x$ASLOCATION" != "x"; then
    ASVERSION=`$ASLOCATION --version | grep GNU`
    if test "x$ASVERSION" != "x"; then
      AC_DEFINE(HAVE_GAS, 1, [Define if GNU as is present to compile MMX code])
    fi
  fi
fi

AM_CONDITIONAL(BUILD_GEN_CONV, test "x$ASVERSION" != "x")

GNOME_COMPILE_WARNINGS

pkg_modules="libgnomeui-2.0 libglade-2.0"
PKG_CHECK_MODULES(PACKAGE, [$pkg_modules])
AC_SUBST(PACKAGE_CFLAGS)
AC_SUBST(PACKAGE_LIBS)

AC_PATH_PROG(GDK_PIXBUF_CSOURCE, gdk-pixbuf-csource)
test -z "$GDK_PIXBUF_CSOURCE" && AC_MSG_ERROR([
*** You need the gdk-pixbuf-csource tool which is installed
*** from GTK+ 2.0's gdk-pixbuf.
])

dnl ---------------------------------------------------------------------------
dnl Check how to link pthreads functions
dnl ---------------------------------------------------------------------------
AC_CHECK_LIB(pthread, pthread_create,,[
  AC_TRY_LINK(, pthread_create();,,[
    LDFLAGS="$LDFLAGS -pthread"
    AC_TRY_LINK(, pthread_create();,,[
      AC_MSG_ERROR([Unable to link pthread functions])
    ])
  ])
])

dnl ---------------------------------------------------------------------------
dnl Check for vbi decoding library
dnl ---------------------------------------------------------------------------
HAVE_ZVBI="yes"
SAVE_LIBS="$LIBS"
LIBS="$LIBS -lpng"
dnl check for function and declaration in newest version
AC_CHECK_LIB(zvbi, vbi_decoder_new,
  AC_EGREP_HEADER(vbi_decoder, libzvbi.h, true, HAVE_ZVBI=no),
    HAVE_ZVBI=no, $UNICODE_LIBS)
if test "$HAVE_ZVBI" = "yes"; then
  AC_DEFINE(HAVE_LIBZVBI, 1, [Define if ZVBI lib is present])
  ZVBI_LIB="-lzvbi"
else
  AC_MSG_WARN([*** ZVBI library not found, VBI will be disabled ***])
fi
AC_SUBST(ZVBI_LIB)
LIBS="$SAVE_LIBS"

dnl ---------------------------------------------------------------------------
dnl Check for the existance of ARTS (KDE sound server)
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING(for ARTS)
HAVE_ARTS_TEXT="no"
ARTS_VERSION=`artsc-config --version`
if test $? -eq 0; then
  ARTS_CFLAGS=`artsc-config --cflags`
  ARTS_LIBS=`artsc-config --libs`
  SAVE_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $ARTS_CFLAGS $ARTS_LIBS"
  AC_TRY_LINK([#include <artsc.h>],, HAVE_ARTS_TEXT="yes")
  CFLAGS="$SAVE_CFLAGS"
fi
if test $HAVE_ARTS_TEXT = "no"; then
  AC_MSG_RESULT([not found])
else
  AC_MSG_RESULT($ARTS_VERSION)
  AC_SUBST(ARTS_CFLAGS)
  AC_SUBST(ARTS_LIBS)
  AC_DEFINE(HAVE_ARTS, 1, [Define if ARTS sound server is present])
fi

dnl ---------------------------------------------------------------------------
dnl Check for OSS.
dnl ---------------------------------------------------------------------------
HAVE_OSS="no"
AC_REQUIRE_CPP
AC_CHECK_HEADERS(sys/soundcard.h, HAVE_OSS=yes,)
AC_CHECK_HEADERS(machine/soundcard.h, HAVE_OSS=yes,)
if test "$HAVE_OSS" = "yes"; then
  AC_DEFINE(HAVE_OSS, 1, [Define to compile with OSS support])
else
  AC_MSG_WARN([*** OSS support not available ***])
fi

dnl ---------------------------------------------------------------------------
dnl Check the JPEG writing lib
dnl ---------------------------------------------------------------------------
JPEG_LIB=""
HAVE_JPEG="yes"
AC_CHECK_LIB(jpeg, jpeg_destroy_compress, JPEG_LIB="-ljpeg", HAVE_JPEG="no")
dnl The screenshot plugin requires libjpeg
if test "$HAVE_JPEG" = "yes"; then
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD screenshot"
  AC_DEFINE(HAVE_LIBJPEG, 1, [Define if JPEG lib is present])
fi
AC_SUBST(JPEG_LIB)

dnl ---------------------------------------------------------------------------
dnl Check the PNG writing lib
dnl ---------------------------------------------------------------------------
PNG_LIB=""
HAVE_PNG="yes"
AC_CHECK_LIB(png, png_destroy_write_struct, PNG_LIB="-lpng -lz -lm", HAVE_PNG="no", -lz -lm)
dnl Zapzilla PNG export
if test "x$HAVE_PNG" = "xyes"; then
  AC_DEFINE(HAVE_LIBPNG, 1, [Define if PNG lib is present])
fi
AC_SUBST(PNG_LIB)

dnl ---------------------------------------------------------------------------
dnl Record plugin: librte, real time a/v encoding
dnl ---------------------------------------------------------------------------
SAVE_LIBS=$LIBS
HAVE_RTE="0.5"
AC_CHECK_LIB(rte, rte_parameters_set,, [HAVE_RTE="no"])
AC_EGREP_HEADER(rte_parameters_set, librte.h,, [HAVE_RTE="no"])
if test "$HAVE_RTE" != "no"; then
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD mpeg"
  AC_DEFINE(HAVE_LIBRTE, 1, [Define if RTE lib 0.5 is present])
  RTE_LIB="-lrte"
fi
AC_SUBST(RTE_LIB)
LIBS="$SAVE_LIBS"

dnl ---------------------------------------------------------------------------
dnl Check for lirc_client
dnl ---------------------------------------------------------------------------
HAVE_LIRC="yes"
AC_REQUIRE_CPP
AC_CHECK_LIB(lirc_client, lirc_init,
  AC_EGREP_HEADER(lirc_init, lirc/lirc_client.h, true, HAVE_LIRC=no),
    HAVE_LIRC=no,)
if test "$HAVE_LIRC" = "yes"; then
  PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD alirc"
  AC_DEFINE(HAVE_LIRC, 1, [Define if LIRC client lib is present])
  LIRC_LIB="-llirc_client"
else
  AC_MSG_WARN([*** LIRC client support not available, not building alirc ***])
fi
AC_SUBST(LIRC_LIB)

dnl ---------------------------------------------------------------------------
dnl Check for ESD lib (FIXME)
dnl ---------------------------------------------------------------------------
ESD_LIBS=""
HAVE_ESD=yes
AC_CHECK_LIB(esd, esd_record_stream_fallback, ESD_LIBS="-lesd", HAVE_ESD=no,)
if test "x$HAVE_ESD" = "xyes"; then
  AC_DEFINE(HAVE_LIBESD, 1, [Define if ESD lib is present])
fi
AC_SUBST(ESD_LIBS)

dnl ---------------------------------------------------------------------------
dnl Check for Python support (our script language)
dnl ---------------------------------------------------------------------------
AC_PYTHON_CHECK

dnl ----------------------------------------------------------------------
dnl Check for libxml2 (src/zconf)
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING([for libxml2])
HAVE_LIBXML="no"
LIBXML_VERSION=`xml2-config --version`
if test $? -eq 0; then
  LIBXML_CFLAGS=`xml2-config --cflags`
  LIBXML_LIBS=`xml2-config --libs`
  XML_LIB="xml2"
  SAVE_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $LIBXML_CFLAGS $LIBXML_LIBS"
  AC_TRY_LINK([#include <libxml/parser.h>],, HAVE_LIBXML="yes")
  CFLAGS="$SAVE_CFLAGS"
fi
AC_MSG_RESULT($LIBXML_VERSION)
if test $HAVE_LIBXML = "no"; then
  AC_MSG_ERROR([This version of Zapping requires libxml2])
fi
AC_SUBST(LIBXML_CFLAGS)
AC_SUBST(LIBXML_LIBS)

dnl ---------------------------------------------------------------------------
dnl Native language support
dnl ---------------------------------------------------------------------------
GETTEXT_PACKAGE=AC_PACKAGE_NAME
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Package name])
ALL_LINGUAS="da de es fr it nl sv pl"
AM_GLIB_GNU_GETTEXT

dnl ---------------------------------------------------------------------------
dnl Documentation
dnl ---------------------------------------------------------------------------
dnl SCROLLKEEPER_BUILD_REQUIRED=0.3.5
dnl AC_SUBST(SCROLLKEEPER_BUILD_REQUIRED)
dnl 
dnl AC_PATH_PROG(SCROLLKEEPER_CONFIG, [scrollkeeper-config], [no])
dnl if test "$SCROLLKEEPER_CONFIG" = "no"; then
dnl   AC_MSG_ERROR([Couldn't find scrollkeeper-config. Please install
dnl the scrollkeeper package: http://scrollkeeper.sourceforge.net])
dnl fi

dnl ---------------------------------------------------------------------------

dnl Basically this is an automake 1.4 file, as gnome-autogen.sh of Gnome 2.0
dnl and 2.2 require 1.4, while Gnome 2.4 does not. The lines below come from
dnl gtk+ 2.2.3. Seems to work with automake 1.7 as well, although we should
dnl use AM_PROG_AS with 1.7 instead of these hacks.

dnl XXXX Hack: Set AS and ASFLAGS so that automake 1.5 will be happy
AS="\${CC}"
ASFLAGS="\${CFLAGS}"
AC_SUBST(AS)
AC_SUBST(ASFLAGS)
dnl XXXX Hack: Set CCAS and CCASFLAGS so that automake 1.6 will be happy
CCAS="\${CC}"
CCASFLAGS="\${CFLAGS}"
AC_SUBST(CCAS)
AC_SUBST(CCASFLAGS)

dnl Setup the compilation flags

WARN_CFLAGS="-Wall -Wunused -Wmissing-prototypes -Wmissing-declarations"

DEPR_CFLAGS="\
  -DG_DISABLE_DEPRECATED \
  -DGTK_DISABLE_DEPRECATED \
  -DGDK_DISABLE_DEPRECATED \
  -DGDK_PIXBUF_DISABLE_DEPRECATED \
  -DGNOME_DISABLE_DEPRECATED \
"

DIR_CFLAGS="\
  -DPACKAGE_DATA_DIR=\\\"\${prefix}/\${DATADIRNAME}\\\" \
  -DPACKAGE_LOCALE_DIR=\\\"\${prefix}/\${DATADIRNAME}/locale\\\" \
  -DPACKAGE_PIXMAPS_DIR=\\\"\${prefix}/\${DATADIRNAME}/pixmaps/\${PACKAGE}\\\"\
  -DPACKAGE_LIB_DIR=\\\"\${prefix}/lib/\${PACKAGE}\\\" \
  -DPACKAGE_ZSFB_DIR=\\\"\${DESTDIR}\${sbindir}\\\" \
"

DEFAULT_CFLAGS="$WARN_CFLAGS -D_GNU_SOURCE $DEPR_CFLAGS $X_CFLAGS $DIR_CFLAGS"
AC_SUBST(DEFAULT_CFLAGS)

PACKAGE_PIXMAPS_DIR="\${prefix}/\${DATADIRNAME}/pixmaps/\${PACKAGE}"
AC_SUBST(PACKAGE_PIXMAPS_DIR)

PACKAGE_LIB_DIR="\${prefix}/lib/\${PACKAGE}"
AC_SUBST(PACKAGE_LIB_DIR)

PLUGIN_DEFAULT_DIR="\${PACKAGE_LIB_DIR}/plugins"
AC_SUBST(PLUGIN_DEFAULT_DIR)

PLUGIN_DEFAULT_FLAGS="$DEFAULT_CFLAGS -Wno-unused"
AC_SUBST(PLUGIN_DEFAULT_FLAGS)

COMMON_INCLUDES="$PY_CFLAGS $PACKAGE_CFLAGS $UNICODE_CFLAGS $ARTS_CFLAGS"
AC_SUBST(COMMON_INCLUDES)

AC_OUTPUT([
Makefile
common/Makefile
src/Makefile
po/Makefile.in
glade/Makefile
pixmaps/Makefile
zapping_setup_fb/Makefile
zapping_setup_fb/zapping_fix_overlay
plugins/Makefile
plugins/alirc/Makefile
plugins/mpeg/Makefile
plugins/screenshot/Makefile
help/Makefile
help/man/Makefile
])

dnl needs work
dnl help/C/Makefile

dnl help/de/Makefile
dnl plugins/lirc/Makefile

dnl ---------------------------------------------------------------------------

echo "
	Optional package
	----------------
	VBI lib                         $HAVE_ZVBI
	JPEG lib                        $HAVE_JPEG
	PNG lib                         $HAVE_PNG
	MMX                             $HAVE_MMX
	XVideo                          $HAVE_XV
	RTE                             $HAVE_RTE
	Lirc client                     $HAVE_LIRC
	PAM                             $HAVE_PAM
	ARTS                            $HAVE_ARTS_TEXT

	Plugins to build
	----------------"

for x in $PLUGINS_TO_BUILD; do
  echo "        "$x
done

echo
