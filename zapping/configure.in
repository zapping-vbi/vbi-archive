dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/callbacks.c)
AM_INIT_AUTOMAKE(zapping, 0.5.9cvs)
AM_CONFIG_HEADER(config.h)

dnl Pick up the Gnome macros.
AM_ACLOCAL_INCLUDE(macros)

AM_PROG_LIBTOOL

dnl These are the plugins we can build, they depend on the present
dnl libs.
PLUGINS_TO_BUILD="template"

dnl ---------------------------------------------------------------------------
dnl enable X extensions
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING(whether to enable X extensions)
AC_ARG_ENABLE(
	x_extensions,
	[  --disable-x-extensions  Disable all X extensions],
	enable_x_extensions="$enableval", enable_x_extensions="yes")
AC_MSG_RESULT($enable_x_extensions)
if test "x$enable_x_extensions" = "xno"; then
	AC_DEFINE(DISABLE_X_EXTENSIONS)
else
	X_DGA_LIBS="-lXxf86dga -lXxf86vm"
	AC_SUBST(X_DGA_LIBS)
fi

dnl ---------------------------------------------------------------------------
dnl do not order channels
dnl ---------------------------------------------------------------------------
AC_ARG_ENABLE(
	ordering,
	[  --disable-ordering      Disable automatic channel ordering],
	enable_ordering="$enableval", enable_ordering="yes")
if test "x$enable_ordering" = "xno"; then
	AC_DEFINE(DISABLE_CHANNEL_ORDERING)
fi

dnl ---------------------------------------------------------------------------
dnl enable V4L/V4L2 checks on startup of tveng
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING(whether to enable some checks on the V4L device)
AC_ARG_ENABLE(
	tveng-checks,
	[  --enable-tveng-checks   Enable some initial TVeng checks],
	enable_tveng_checks="$enableval", enable_tveng_checks="no")
AC_MSG_RESULT($enable_tveng_checks)
if test "x$enable_tveng_checks" = "xyes"; then
	AC_DEFINE(TVENG_ENABLE_IOCTL_TESTS)
fi

GNOME_INIT
AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

dnl ----------------------------------------------------------------------
dnl Check the JPEG writing lib
dnl ----------------------------------------------------------------------
JPEG_LIB=""
HAVE_JPEG="yes"
AC_CHECK_LIB(jpeg, jpeg_destroy_compress, JPEG_LIB="-ljpeg", HAVE_JPEG="no")
dnl The screenshot plugin requires libjpeg
if test "$HAVE_JPEG" = "yes"; then
	PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD screenshot"
fi
AC_SUBST(JPEG_LIB)

dnl ----------------------------------------------------------------------
dnl Check for RTE, the MPEG encoder
dnl ----------------------------------------------------------------------
HAVE_RTE=""
AC_CHECK_LIB(rte, rte_start_encoding, HAVE_RTE="yes", HAVE_RTE="no")
dnl The mpeg plugin requires RTE
if test "$HAVE_RTE" = "yes"; then
	PLUGINS_TO_BUILD="$PLUGINS_TO_BUILD mpeg"
else
	AC_MSG_WARN([*** RTE not found, MPEG capture will be disabled ***])
fi

GNOME_COMPILE_WARNINGS
GNOME_X_CHECKS
GNOME_XML_CHECK

dnl ----------------------------------------------------------------------
dnl Check for the existance of gdk-pixbuf (some plugins need it)
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING(for gdk_pixbuf)
GDK_PIXBUF_VERSION=`gdk-pixbuf-config --version`
if test $? -eq 0; then
	AC_MSG_RESULT($GDK_PIXBUF_VERSION)
	GDK_PIXBUF_CFLAGS=`gdk-pixbuf-config --cflags`
	dnl Avoid including twice the result of "gtk-config --libs"
	dnl (gdk-pixbuf includes it too)
	TMP_VAR=`gtk-config --libs | sed "s/\//\\\\\\\\\//g"`
	GDK_PIXBUF_LIBS=`gdk-pixbuf-config --libs`
	GDK_PIXBUF_LIBS=`echo $GDK_PIXBUF_LIBS | sed "s/$TMP_VAR//g"`
	AC_SUBST(GDK_PIXBUF_CFLAGS)
	AC_SUBST(GDK_PIXBUF_LIBS)
	HAVE_GDK_PIXBUF="yes"
	AC_DEFINE(HAVE_GDKPIXBUF)
else
	AC_MSG_RESULT([no, VBI support will be disabled])
	HAVE_GDK_PIXBUF="no"
dnl fixme: Remember to disable the VBI plugin now
fi

dnl ----------------------------------------------------------------------
dnl Check which libxml syntax we will use (children vs. childs)
dnl ----------------------------------------------------------------------
AC_MSG_CHECKING(which syntax to use for xml child nodes)
AC_TRY_LINK([#include <gnome-xml/tree.h>],
[
xmlNodePtr node;
node->childs = NULL;
return 0;
],
AC_MSG_RESULT(childs)
AC_DEFINE(LIBXML_CHILDS),
AC_MSG_RESULT(children))

dnl ----------------------------------------------------------------------
dnl Check whether an intel arch is present, and enable MMX support
dnl ----------------------------------------------------------------------
YUV2RGB_MMX=""
HAVE_MMX="no"
ARCH_CFLAGS=""
case "$host_alias" in
i?86-* | k?-*) dnl catch i386,i486,i586,i686,k6,k7
	AC_DEFINE(__i386__) 
	case "$host_alias" in
		i386-*) dnl who are we kidding?
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=m386";;
		i486-*)
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=m486";;
		i586-*)
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=pentium";;
		i686-*)
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=pentiumpro";;
		k6-*)
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=k6";;
		k7-*)
			HAVE_MMX="yes"			
			ARCH_CFLAGS="-march=k7";;
	esac;;
alpha*-*) AC_DEFINE(__alpha__);;
sparc-*) 
	AC_DEFINE(__sparc__)
	ARCH_CFLAGS="-mcpu=ultrasparc -mvis";;
ppc-*) AC_DEFINE(__ppc__);;
powerpc-*) AC_DEFINE(__ppc__);;
*) ;;
esac

if test "x$HAVE_MMX" = "xyes"; then
	AC_DEFINE(USE_MMX)
fi

AC_SUBST(ARCH_CFLAGS)

dnl ----------------------------------------------------------------------
dnl Check for existance of xmlDocGetRootNode and friends
dnl ----------------------------------------------------------------------
AC_CHECK_LIB(xml, xmlDocGetRootNode,, AC_DEFINE(LIBXML_NO_ROOT))

AM_PATH_LIBGLADE(,
AC_MSG_ERROR(*** Cannot find libglade in your system. Is it installed? ***),
gnome)

dnl Add the languages which your application supports here.
ALL_LINGUAS="de es fr ru"
AM_GNU_GETTEXT

dnl Set PACKAGE_LOCALE_DIR and PACKAGE_DATA_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR,
	"${ac_default_prefix}/${DATADIRNAME}/locale")
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR,
	"${ac_default_prefix}/${DATADIRNAME}/${PACKAGE}")
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale")
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/${DATADIRNAME}/${PACKAGE}")
fi

dnl ----------------------------------------------------------------------
dnl Check for the Xv extension
dnl ----------------------------------------------------------------------
AC_CHECK_LIB(Xv, XvShmPutImage, XV_PRESENT="yes",, $GTK_LIBS)
if test "x$XV_PRESENT" = "xyes"; then
AC_DEFINE(HAVE_LIBXV)
X_XV_LIBS="-lXv"
AC_SUBST(X_XV_LIBS)
fi

dnl Subst PACKAGE_PIXMAPS_DIR.
PACKAGE_PIXMAPS_DIR="${datadir}/pixmaps/${PACKAGE}"
AC_SUBST(PACKAGE_PIXMAPS_DIR)

AC_SUBST(PLUGINS_TO_BUILD)

AC_OUTPUT([
zapping.spec
Makefile
macros/Makefile
pixmaps/Makefile
src/Makefile
intl/Makefile
libvbi/Makefile
po/Makefile.in
glade/Makefile
help/Makefile
help/C/Makefile
plugins/Makefile
common/Makefile
zapping_setup_fb/Makefile
plugins/template/Makefile
plugins/screenshot/Makefile
plugins/mpeg/Makefile
])

echo "
	Optional package		Found
	----------------		-----
	GdkPixbuf			$HAVE_GDK_PIXBUF
	JPEG lib			$HAVE_JPEG
	MMX support			$HAVE_MMX
	XVideo support			$XV_PRESENT
	MPEG encoder support		$HAVE_RTE

	Plugins to build
	----------------
	`echo $PLUGINS_TO_BUILD | sed "s/ /\\\\
	/g"`
"