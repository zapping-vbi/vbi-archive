		
"		## First, get and save our possible Bob values\n"
"		## Assume our pixels are layed out as follows with x the calc'd bob value\n"
"		## and the other pixels are from the current field\n"
"		##  \n"
"		##		  j a b c k		current field\n"
"		##            x			calculated line\n"
"		##        m d e f n		current field\n"
"		##\n"
"		## we calc the bob value luma value as:\n"
"        ## if |j - n| < Thres && |a - m| > Thres \n"
"        ##  avg(j,n)\n"
"        ## end if\n"
"        ## if |k - m| < Thres && |c - n| > Thres \n"
"        ##  avg(k,m)\n"
"        ## end if\n"
"        ## if |c - d| < Thres && |b - f| > Thres \n"
"        ##  avg(c,d)\n"
"        ## end if\n"
"        ## if |a - f| < Thres && |b - d| > Thres \n"
"        ##  avg(a,f)\n"
"        ## end if\n"
"        ## if |b - e| < Thres\n"
"        ##  avg(b,e)\n"
"        ## end if\n"
"        ## pickup any thing not yet set with avg(b,e)\n"
"\n"
"		## j, n\n"
"        pxor mm5, mm5\n"
"        pxor mm6, mm6\n"
"        pxor mm7, mm7\n"
"\n"
"		movq    mm0, qword ptr[ebx-2]		## value a from top left		\n"
"		movq    mm1, qword ptr[ebx+ecx-4]	## value m from bottom right			\n"
"\n"
"		movq	mm3, mm0\n"
"		psubusb	mm3, mm1\n"
"		psubusb mm1, mm0\n"
"		por		mm3, mm1					## abs(a,m)\n"
"\n"
"		psubusb mm3, DiffThres		## nonzero where abs(a,m) > Thres else 0\n"
"		pxor	mm4, mm4\n"
"		pcmpeqb mm3, mm4			## now ff where abs(a,m) < Thres, else 00	\n"
"		pcmpeqb	mm4, mm3			## here ff where abs(a,m) > Thres, else 00\n"
"\n"
"\n"
"		movq    mm0, qword ptr[ebx-4]		## value j\n"
"		movq    mm1, qword ptr[ebx+ecx+4]	## value n\n"
"		movq	mm2, mm0					\n"
"		pavgb	mm2, mm1					## avg(j,n)\n"
"        movq	mm3, mm0\n"
"		psubusb	mm0, mm1\n"
"		psubusb mm1, mm3\n"
"		por		mm0, mm1					## abs(j,n)\n"
"\n"
"        movq    mm1, mm0\n"
"		psubusb mm1, DiffThres		## nonzero where abs(j,n) > Thres else 0\n"
"		pxor	mm3, mm3\n"
"		pcmpeqb mm1, mm3			## now ff where abs(j,n) < Thres, else 00	\n"
"\n"
"        pand    mm1, mm4\n"
"\n"
"        pand    mm2, mm1\n"
"        pand    mm0, mm1\n"
"\n"
"        movq    mm3, mm1\n"
"        pxor    mm3, mm5\n"
"        pand    mm6, mm3\n"
"        pand    mm7, mm3\n"
"        pand    mm5, mm3\n"
"\n"
"        por     mm5, mm1\n"
"        por     mm6, mm2\n"
"        por     mm7, mm0\n"
"        \n"
"        \n"
"        ## k & m\n"
"		movq    mm0, qword ptr[ebx+2]		## value c from top left		\n"
"		movq    mm1, qword ptr[ebx+ecx+4]	## value n from bottom right			\n"
"\n"
"		movq	mm3, mm0\n"
"		psubusb	mm3, mm1\n"
"		psubusb mm1, mm0\n"
"		por		mm3, mm1					## abs(c,n)\n"
"\n"
"		psubusb mm3, DiffThres		## nonzero where abs(c,n) > Thres else 0\n"
"		pxor	mm4, mm4\n"
"		pcmpeqb mm3, mm4			## now ff where abs(c,n) < Thres, else 00	\n"
"		pcmpeqb	mm4, mm3			## here ff where abs(c,n) > Thres, else 00\n"
"\n"
"\n"
"		movq    mm0, qword ptr[ebx+4]		## value k\n"
"		movq    mm1, qword ptr[ebx+ecx-4]	## value m\n"
"		movq	mm2, mm0					\n"
		V_PAVGB (mm2, mm1, mm3, ShiftMask)	// avg(k,m)
"        movq	mm3, mm0\n"
"		psubusb	mm0, mm1\n"
"		psubusb mm1, mm3\n"
"		por		mm0, mm1					## abs(k,m)\n"
"\n"
"        movq    mm1, mm0\n"
"		psubusb mm1, DiffThres		## nonzero where abs(k,m) > Thres else 0\n"
"		pxor	mm3, mm3\n"
"		pcmpeqb mm1, mm3			## now ff where abs(k,m) < Thres, else 00	\n"
"\n"
"        pand    mm1, mm4\n"
"\n"
"        pand    mm2, mm1\n"
"        pand    mm0, mm1\n"
"\n"
"        movq    mm3, mm1\n"
"        pxor    mm3, mm5\n"
"        pand    mm6, mm3\n"
"        pand    mm7, mm3\n"
"        pand    mm5, mm3\n"
"\n"
"        por     mm5, mm1\n"
"        por     mm6, mm2\n"
"        por     mm7, mm0\n"
"\n"
"\n"
"        ## c & d\n"
"		movq    mm0, qword ptr[ebx]		## value b from top left		\n"
"		movq    mm1, qword ptr[ebx+ecx+2]	## value f from bottom right			\n"
"\n"
"		movq	mm3, mm0\n"
"		psubusb	mm3, mm1\n"
"		psubusb mm1, mm0\n"
"		por		mm3, mm1					## abs(b,f)\n"
"\n"
"		psubusb mm3, DiffThres		## nonzero where abs(b,f) > Thres else 0\n"
"		pxor	mm4, mm4\n"
"		pcmpeqb mm3, mm4			## now ff where abs(b,f) < Thres, else 00	\n"
"		pcmpeqb	mm4, mm3			## here ff where abs(b,f) > Thres, else 00\n"
"\n"
"		movq    mm0, qword ptr[ebx+2]		## value c\n"
"		movq    mm1, qword ptr[ebx+ecx-2]	## value d\n"
"		movq	mm2, mm0					\n"
		V_PAVGB (mm2, mm1, mm3, ShiftMask)	// avg(c,d)
"        movq	mm3, mm0\n"
"		psubusb	mm0, mm1\n"
"		psubusb mm1, mm3\n"
"		por		mm0, mm1					## abs(c,d)\n"
"\n"
"        movq    mm1, mm0\n"
"		psubusb mm1, DiffThres		## nonzero where abs(c,d) > Thres else 0\n"
"		pxor	mm3, mm3\n"
"		pcmpeqb mm1, mm3			## now ff where abs(c,d) < Thres, else 00	\n"
"\n"
"        pand    mm1, mm4\n"
"\n"
"        pand    mm2, mm1\n"
"        pand    mm0, mm1\n"
"\n"
"        movq    mm3, mm1\n"
"        pxor    mm3, mm5\n"
"        pand    mm6, mm3\n"
"        pand    mm7, mm3\n"
"        pand    mm5, mm3\n"
"\n"
"        por     mm5, mm1\n"
"        por     mm6, mm2\n"
"        por     mm7, mm0\n"
"\n"
"        ## a & f\n"
"		movq    mm0, qword ptr[ebx]		## value b from top left		\n"
"		movq    mm1, qword ptr[ebx+ecx-2]	## value d from bottom right			\n"
"\n"
"		movq	mm3, mm0\n"
"		psubusb	mm3, mm1\n"
"		psubusb mm1, mm0\n"
"		por		mm3, mm1					## abs(b,d)\n"
"\n"
"		psubusb mm3, DiffThres		## nonzero where abs(b,d) > Thres else 0\n"
"		pxor	mm4, mm4\n"
"		pcmpeqb mm3, mm4			## now ff where abs(b,d) < Thres, else 00	\n"
"		pcmpeqb	mm4, mm3			## here ff where abs(b,d) > Thres, else 00\n"
"\n"
"		movq    mm0, qword ptr[ebx-2]		## value a\n"
"		movq    mm1, qword ptr[ebx+ecx+2]	## value f\n"
"		movq	mm2, mm0					\n"
		V_PAVGB (mm2, mm1, mm3, ShiftMask)	// avg(a,f)
"        movq	mm3, mm0\n"
"		psubusb	mm0, mm1\n"
"		psubusb mm1, mm3\n"
"		por		mm0, mm1					## abs(a,f)\n"
"\n"
"        movq    mm1, mm0\n"
"		psubusb mm1, DiffThres		## nonzero where abs(a,f) > Thres else 0\n"
"		pxor	mm3, mm3\n"
"		pcmpeqb mm1, mm3			## now ff where abs(a,f) < Thres, else 00	\n"
"\n"
"        pand    mm1, mm4\n"
"\n"
"        pand    mm2, mm1\n"
"        pand    mm0, mm1\n"
"\n"
"        movq    mm3, mm1\n"
"        pxor    mm3, mm5\n"
"        pand    mm6, mm3\n"
"        pand    mm7, mm3\n"
"        pand    mm5, mm3\n"
"\n"
"        por     mm5, mm1\n"
"        por     mm6, mm2\n"
"        por     mm7, mm0\n"
"\n"
" 		pand	mm5, YMask			## mask out chroma from here\n"
" 		pand	mm6, YMask			## mask out chroma from here\n"
" 		pand	mm7, YMask			## mask out chroma from here\n"
"\n"
"		## b,e\n"
"		movq    mm0, qword ptr[ebx]		## value b from top 		\n"
"		movq    mm1, qword ptr[ebx+ecx]	## value e from bottom \n"
"		movq	mm2, mm0					\n"
		V_PAVGB (mm2, mm1, mm3, ShiftMask)	// avg(b,e)
"        movq	mm3, mm0\n"
"		psubusb	mm0, mm1\n"
"		psubusb mm1, mm3\n"
"		por		mm0, mm1					## abs(b,e)\n"
"\n"
"        movq    mm1, mm0\n"
"		psubusb mm1, DiffThres		## nonzero where abs(b,e) > Thres else 0\n"
"		pxor	mm3, mm3\n"
"		pcmpeqb mm1, mm3			## now ff where abs(b,e) < Thres, else 00	\n"
"\n"
"        pand    mm2, mm1\n"
"        pand    mm0, mm1\n"
"\n"
"        movq    mm3, mm1\n"
"        pxor    mm3, mm5\n"
"        pand    mm6, mm3\n"
"        pand    mm7, mm3\n"
"        pand    mm5, mm3\n"
"\n"
"        por     mm5, mm1\n"
"        por     mm6, mm2\n"
"        por     mm7, mm0\n"
"\n"
"		## bob in any leftovers\n"
"		movq    mm0, qword ptr[ebx]		## value b from top 		\n"
"		movq    mm1, qword ptr[ebx+ecx]	## value e from bottom \n"
"\n"
"## We will also calc here the max/min values to later limit comb\n"
"## so the max excursion will not exceed the Max_Comb constant\n"
"\n"
#ifdef SKIP_SEARCH		
"		movq	mm2, mm0\n"
"##		pminub	mm2, mm1\n"
		V_PMINUB (mm2, mm1, mm4)
"\n"
"##		pmaxub	mm6, mm2			## clip our current results so far to be above this\n"
		V_PMAXUB (mm6, mm2)
"		movq	mm2, mm0\n"
		V_PMAXUB (mm2, mm1)
"##		pminub	mm6, mm2			## clip our current results so far to be below this\n"
		V_PMINUB (mm6, mm2, mm4)
"\n"
#else
"		movq	mm2, mm0\n"
"		movq	mm4, qword ptr[eax]\n"
"		psubusb mm2, mm4\n"
"		psubusb mm4, mm0\n"
"		por		mm4, mm2			## abs diff\n"
"		\n"
"		movq	mm2, mm1\n"
"		movq	mm3, qword ptr[eax+ecx]\n"
"		psubusb mm2, mm3\n"
"		psubusb mm3, mm1\n"
"		por		mm3, mm2			## abs diff\n"
"##		pmaxub  mm3, mm4			## top or bottom pixel moved most\n"
		V_PMAXUB (mm3, mm4)			// top or bottom pixel moved most
"		psubusb mm3, DiffThres		## moved more than allowed? or goes to 0?\n"
"		pxor	mm4, mm4\n"
"		pcmpeqb mm3, mm4			## now ff where low motion, else high motion\n"
"		\n"
"		movq	mm2, mm0\n"
"##		pminub	mm2, mm1\n"
		V_PMINUB (mm2, mm1, mm4)
"\n"
"##		pmaxub	mm6, mm2			## clip our current results so far to be above this\n"
		V_PMAXUB (mm6, mm2)
"\n"
"		psubusb mm2, mm3			## maybe decrease it to 0000.. if no surround motion\n"
"		movq	%[Min_Vals], mm2\n"
"\n"
"		movq	mm2, mm0\n"
		V_PMAXUB (mm2, mm1)
"##		pminub	mm6, mm2			## clip our current results so far to be below this\n"
		V_PMINUB (mm6, mm2, mm4)
"		paddusb mm2, mm3			## maybe increase it to ffffff if no surround motion\n"
"		movq	%[Max_Vals], mm2\n"
#endif
"			\n"
"		movq	mm2, mm0						\n"
"##		pavgb	mm2, mm1					## avg(b,e)\n"
		V_PAVGB (mm2, mm1, mm3, ShiftMask)	// avg(b,e)
"				\n"
"		movq	mm3, mm0\n"
"		psubusb	mm3, mm1\n"
"		psubusb mm1, mm0\n"
"		por		mm3, mm1			## abs(b,e)\n"
"		movq	mm1, mm3			## keep copy of diffs\n"
"\n"
"		pxor	mm4, mm4			\n"
"		psubusb mm3, mm7			## nonzero where new weights bigger, else 0\n"
"		pcmpeqb mm3, mm4			## now ff where new better, else 00	\n"
"        pcmpeqb mm0, mm0\n"
"        pandn   mm5, mm0\n"
"        por     mm3, mm5\n"
"		pcmpeqb	mm4, mm3			## here ff where old better, else 00\n"
"\n"
"		pand	mm1, mm3\n"
"		pand	mm2, mm3\n"
"\n"
"		pand    mm6, mm4\n"
"		pand    mm7, mm4\n"
"\n"
"		por		mm6, mm2			## our x2 value\n"
"		por		mm7, mm1			## our x2 diffs\n"
"		movq	mm4, mm7			## save as bob uncertainty indicator\n"

