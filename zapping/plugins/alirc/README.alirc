/* Alirc: Another lirc plugin for Zapping
 * based on zappings template plugin
 * Copyright (C) 2001 Sjoerd Simons <sjoerd@luon.net>
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

Why another lirc plugin for zapping? 

  The original lirc plugin has two big problems:
    * It uses a thread to read the lirc socket and takes actions in that
      thread. The X libraries aren't thread safe, so this will cause Xlib
      errors.
    * It reads the lirc socket itself, instead of using the lirc_client
      library. The causes it to not play nice with other lirc clients. why,
      an lirc client read your ~/.lircrc, in which you can specify different
      modes, so you can reuse buttons among applications.. the lirc plugins assumes
      the buttons are always meant for it, so bye bye reusing buttons..  

 How do we solve this, simply use gdk_input_add instead of an extra thread
 and use the lirc_client library, like any good lirc client app would

How does it work?

  The lirc documentation explains how to make an .lircrc file better
  then I ever could. So read that. The "prog" name for alirc is zapping_lirc
  and the following commands are understood:

  CHANUP           -> One channel up	   
  CHANDOWN         -> One channel down 
  QUIT             -> Quit Zapping
  ZOOM             -> Switch between fullscreen and windowed mode
  SETCHANNEL <int> -> Select a particular channel
  MUTE             -> Turn sound on/off
  VOL_UP           -> Increase volume
  VOL_DOWN         -> Decrease volume

  ... and the Python commands available in other places. Please see
  README.commands for details.

  So for example, entries in your .lircrc could look like this:

  # Switch between fullscreen/windowed mode
  begin
    remote = PinnacleSysPCTVPRORemote
    prog = zapping_lirc
    button = Zoom
    config = ZOOM
  end

  # Channel number entering
  begin
    remote = PinnacleSysPCTVPRORemote
    prog = zapping_lirc
    button = 0
    config = SETCHANNEL 0
  end
  begin
    remote = PinnacleSysPCTVPRORemote
    prog = zapping_lirc
    button = 1
    config = SETCHANNEL 1
  end
         :
  begin
    remote = PinnacleSysPCTVPRORemote
    prog = zapping_lirc
    button = 9
    config = SETCHANNEL 9
  end

  # Volume up (Python version)
  begin
    remote = PinnacleSysPCTVPRORemote
    prog = zapping_lirc
    button = VOL+
    config = zapping.volume_incr(+5)
    repeat = 1
  end
