dnl Process this file with autoconf to produce a configure script.
dnl $Id: configure.in,v 1.13 2001-12-18 18:24:02 garetxe Exp $

AC_INIT(configure.in)
RTE_VERSION_MAJOR=0
RTE_VERSION_MINOR=5
RTE_VERSION_MICRO=0
AC_SUBST(RTE_VERSION_MAJOR)
AC_SUBST(RTE_VERSION_MINOR)
AC_SUBST(RTE_VERSION_MICRO)
AM_INIT_AUTOMAKE(rte, $RTE_VERSION_MAJOR.$RTE_VERSION_MINOR.$RTE_VERSION_MICRO)
AM_CONFIG_HEADER(config.h)

AM_ACLOCAL_INCLUDE(macros)

AC_PROG_CC

dnl for automake 1.5
AS=$CC
AC_SUBST(AS)
AC_SUBST(ASFLAGS)

dnl Stupid rpm in SuSE
CFLAGS="-g -O2 -Wall -fomit-frame-pointer"

AM_PROG_LIBTOOL

test -e site_def.h || cat <<EOF >site_def.h
/* Site specific definitions */

#ifndef SITE_DEF_H
#define SITE_DEF_H
#if 1 /* EXISTS */
#endif /* EXISTS */
#endif /* SITE_DEF_H */
EOF

create_links () {
	for i in $3; do
		test -e $2/$i || {
			test -f $1/$i || {
				echo "RTE needs files from the Zapping CVS tree at" $1
				echo "which is available from http://zapping.sf.net."
				echo "Sorry for the inconvenience."
				echo "$1/$i"
				exit 1
			}
			echo "creating link for" $2/$i
			dnl absolute path because make dist moves the tree
			ln -s `cd $1; pwd; cd - >/dev/null`/$i $2/$i || exit 1
		}
	done
}

create_links ../zapping/common common \
"alloc.c alloc.h fifo.c fifo.h list.h math.h threads.h types.h errstr.c errstr.h"

AC_CHECK_HEADER(linux/soundcard.h,AC_DEFINE(OSS, 1,
					    [Define if you have linux/soundcard.h]))

AC_MSG_CHECKING(for EsounD)
ESD_VERSION=`esd-config --version`
if test $? -eq 0; then
	AC_MSG_RESULT($ESD_VERSION)
	ESD_LIBS=`esd-config --libs`
	ESD_CFLAGS=`esd-config --cflags`
	AC_SUBST(ESD_CFLAGS)
	AC_SUBST(ESD_LIBS)
	AC_DEFINE(USE_ESD, 1, [Define if you have ESD.])
else
	AC_MSG_RESULT([no, ESD won't be used])
fi

dnl Build docs from the sources automagically if gtkdoc is available.
GTK_DOC_CHECK

dnl Short term plan is to have these three available
BACKEND_MP1E=no
AC_ARG_WITH(
	mp1e,
	[  --with-mp1e             Add the mp1e backend],
	BACKEND_MP1E="$withval", BACKEND_MP1E="yes")
if test "x$BACKEND_MP1E" = "xyes"; then
	AC_DEFINE(MP1E, 1, [Define if mp1e is built])
fi

BACKEND_FFMPEG=no
BACKEND_DIVX4LINUX=no

AM_CONDITIONAL(BACKEND_FFMPEG, test "x$BACKEND_FFMPEG" = "xyes")
AM_CONDITIONAL(BACKEND_MP1E, test "x$BACKEND_MP1E" = "xyes")
AM_CONDITIONAL(BACKEND_DIVX4LINUX, test "x$BACKEND_DIVX4LINUX" = "xyes")

dnl Check whether program_invocation_name exists, GNU extension
AC_CHECK_FUNCS(program_invocation_name)

dnl Add the languages which your application supports here.
ALL_LINGUAS="de"
AM_GNU_GETTEXT(, [need-ngettext])
LDFLAGS="$LDFLAGS $INTLLIBS"
AC_CHECK_FUNCS(ngettext)

AC_OUTPUT([
Makefile
intl/Makefile
common/Makefile
docs/Makefile
src/Makefile
src/rte-version.h
test/Makefile
po/Makefile.in
rte.spec
])

dnl fscking broken world
if test ! -r po/Makefile; then
	dnl Don't ask :-)
	PF="POT"
	PF=$PF"FILES"
        sed -e "/$PF =/r po/PF" po/Makefile.in > po/Makefile
fi

echo "
	Backend			Build		
	-------			-----
	mp1e			$BACKEND_MP1E
	ffmpeg			$BACKEND_FFMPEG
	divx4linux		$BACKEND_DIVX4LINUX
"
